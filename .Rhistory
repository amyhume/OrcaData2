infant_9months = case_when(!is.na(infant_9months) ~ 9),
infant_12months = case_when(!is.na(infant_12months) ~ 12),
infant_18months = case_when(!is.na(infant_18months) ~ 18),
infant_30months = case_when(!is.na(infant_30months) ~ 30),
child_42months = case_when(!is.na(child_42months) ~ 42)) %>%
unite("timepoints_completed", c("infant_6months", "infant_9months",
"infant_12months", "infant_18months", "infant_30months", "child_42months"), sep = "; ", na.rm = T)
#Languages
languages2$bio_pref_language <- gsub(0, "en", languages2$bio_pref_language)
languages2$bio_pref_language <- gsub(1, "es", languages2$bio_pref_language)
languages_total <- languages %>%
full_join(languages2, by="record_id") %>%
mutate(language = ifelse(is.na(reentry_language), bio_pref_language, reentry_language)) %>%
select(record_id, language)
#cleaning invites
invites <- invites %>%
rename(invite_date = Invitation.send.time, record_id = Record) %>%
select(record_id, invite_date)
#install.packages("tidyverse") #only have to run this the first time you run it
library(tidyverse)
library(CopeData)
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/42 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
#install.packages("tidyverse") #only have to run this the first time you run it
library(tidyverse)
library(CopeData)
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/42 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/42 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
#install.packages("tidyverse") #only have to run this the first time you run it
library(tidyverse)
library(CopeData)
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/42 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
languages <- get_field(token, field = "reentry_language")
languages2 <- get_field(token, field = "bio_pref_language")
timepoints <- get_all_timepoints(token)
timepoints <- timepoints %>%
mutate(infant_6months = case_when(!is.na(infant_6months) ~ 6),
infant_9months = case_when(!is.na(infant_9months) ~ 9),
infant_12months = case_when(!is.na(infant_12months) ~ 12),
infant_18months = case_when(!is.na(infant_18months) ~ 18),
infant_30months = case_when(!is.na(infant_30months) ~ 30),
child_42months = case_when(!is.na(child_42months) ~ 42)) %>%
unite("timepoints_completed", c("infant_6months", "infant_9months",
"infant_12months", "infant_18months", "infant_30months", "child_42months"), sep = "; ", na.rm = T)
#Languages
languages2$bio_pref_language <- gsub(0, "en", languages2$bio_pref_language)
languages2$bio_pref_language <- gsub(1, "es", languages2$bio_pref_language)
languages_total <- languages %>%
full_join(languages2, by="record_id") %>%
mutate(language = ifelse(is.na(reentry_language), bio_pref_language, reentry_language)) %>%
select(record_id, language)
#cleaning invites
invites <- invites %>%
rename(invite_date = Invitation.send.time, record_id = Record) %>%
select(record_id, invite_date)
invites$invite_date <- gsub(" .*", "", invites$invite_date)
invites$invite_date <- as.Date(invites$invite_date, format = "%Y-%m-%d")
invites <- invites %>%
mutate(age_out = invite_date+228)
invites$age_out <- as.Date(invites$age_out, origin = '1970-01-01')
invites$record_id <- as.character(invites$record_id)
invites <- invites %>%
left_join(languages_total, by="record_id") %>%
left_join(timepoints, by="record_id")
invites <- invites %>%
arrange(age_out)
invites <- invites %>%
filter(record_id != '99999999' & record_id != '9999999' & record_id != '99999')
write_csv(invites, 'invites.csv', na='')
full_data <- nt_parameter_data %>%
full_join(t_parameter_data)
View(full_data)
library(tidyverse)
library(crqa)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Data/4 Months/Heart Rate Data/Freeplay/RSA Files")
rsa_files <- list.files(pattern='dyad')
#file <- rsa_files[30]
#optimizeParam parameters
par = list(
method = "crqa",
metric = "euclidean",
maxlag = 20,
radiusspan = 150,
radiussample = 100,
normalize = 0,
rescale = 4,
mindiagline = 10,
minvertline = 10,
tw = 0,
whiteline = FALSE,
recpt = FALSE,
side = "both",
datatype = "continuous",
fnnpercent = NA,  # Set as needed
typeami = "mindip",  # or other option as needed
nbins = 50,
criterion = "firstBelow",  # or other option as needed
threshold = 1,  # Set as needed
maxEmb = 20,
numSamples = 500,
Rtol = 10,  # Set as needed
Atol = 2  # Set as needed
)
#FOR LOOP
nt_parameter_data <- data.frame(record_id = as.character(), nt_radius = as.numeric(), nt_emddim = as.numeric(),
nt_delay = as.numeric(), nt_rr = as.numeric(), nt_det = as.numeric(), nt_nrline = as.numeric(),
nt_maxl = as.numeric(), nt_l = as.numeric(), nt_ent = as.numeric(), nt_rent = as.numeric(),
nt_lam = as.numeric(), nt_tt = as.numeric())
t_parameter_data <- data.frame(record_id = as.character(), t_radius = as.numeric(), t_emddim = as.numeric(),
t_delay = as.numeric(), t_rr = as.numeric(), t_det = as.numeric(), t_nrline = as.numeric(),
t_maxl = as.numeric(), t_l = as.numeric(), t_ent = as.numeric(), t_rent = as.numeric(),
t_lam = as.numeric(), t_tt = as.numeric())
for (file in rsa_files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings='')
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
if (nrow(nt) > 0) {
nt_cg_rsa <- nt$rsa_win15_cg
nt_child_rsa <- nt$rsa_win15_child
nt_params <- optimizeParam(nt_cg_rsa, nt_child_rsa, par, min.rec = 1.8, max.rec = 2.2)
nt_res <- crqa(nt_cg_rsa, nt_child_rsa, embed = nt_params$emddim, delay = nt_params$delay,
radius = nt_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
nt_temp <- data.frame(record_id = id, nt_radius = nt_params$radius, nt_emddim = nt_params$emddim, nt_delay = nt_params$delay,
nt_rr = nt_res$RR, nt_det = nt_res$DET, nt_nrline = nt_res$NRLINE,
nt_maxl = nt_res$maxL, nt_l = nt_res$L, nt_ent = nt_res$ENTR, nt_rent = nt_res$rENTR,
nt_lam = nt_res$LAM, nt_tt = nt_res$TT)
nt_parameter_data <- full_join(nt_parameter_data, nt_temp)
}
if (nrow(t) > 0) {
t_cg_rsa <- t$rsa_win15_cg
t_child_rsa <- t$rsa_win15_child
t_params <- optimizeParam(t_cg_rsa, t_child_rsa, par, min.rec = 1.8, max.rec = 2.2)
t_res <- crqa(t_cg_rsa, t_child_rsa, embed = t_params$emddim, delay = t_params$delay,
radius = t_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
t_temp <- data.frame(record_id = id, t_radius = t_params$radius, t_emddim = t_params$emddim, t_delay = t_params$delay,
t_rr = t_res$RR, t_det = t_res$DET, t_nrline = t_res$NRLINE,
t_maxl = t_res$maxL, t_l = t_res$L, t_ent = t_res$ENTR, t_rent = t_res$rENTR,
t_lam = t_res$LAM, t_tt = t_res$TT)
t_parameter_data <- full_join(t_parameter_data, t_temp)
}
}
full_data <- nt_parameter_data %>%
full_join(t_parameter_data)
summary(full_data$nt_det)
summary(full_data$t_det)
t.test(full_data$nt_det, full_data$t_det)
colnames(full_data)
t.test(full_data$nt_nrline, full_data$t_nrline)
t.test(full_data$nt_maxl, full_data$t_maxl)
t.test(full_data$nt_l, full_data$t_l)
t.test(full_data$nt_ent, full_data$t_ent)
t.test(full_data$nt_rent, full_data$t_rent)
t.test(full_data$nt_lam, full_data$t_lam)
hist(full_data$nt_det, main = "Histogram of DETs", xlab = "%DET")
hist(full_data$t_det, main = "Histogram of DETs", xlab = "%DET")
boxplot(full_data$t_det, main = "Boxplot of RSA Values", ylab = "RSA")
boxplot(full_data$ntt_det, main = "Boxplot of RSA Values", ylab = "RSA")
boxplot(full_data$nt_det, main = "Boxplot of RSA Values", ylab = "RSA")
View(full_data)
par = list(
method = "crqa",
metric = "euclidean",
maxlag = 20,
radiusspan = 200,
radiussample = 100,
normalize = 0,
rescale = 4,
mindiagline = 10,
minvertline = 10,
tw = 0,
whiteline = FALSE,
recpt = FALSE,
side = "both",
datatype = "continuous",
fnnpercent = NA,  # Set as needed
typeami = "mindip",  # or other option as needed
nbins = 50,
criterion = "firstBelow",  # or other option as needed
threshold = 1,  # Set as needed
maxEmb = 20,
numSamples = 500,
Rtol = 10,  # Set as needed
Atol = 2  # Set as needed
)
nt_parameter_data <- data.frame(record_id = as.character(), nt_radius = as.numeric(), nt_emddim = as.numeric(),
nt_delay = as.numeric(), nt_rr = as.numeric(), nt_det = as.numeric(), nt_nrline = as.numeric(),
nt_maxl = as.numeric(), nt_l = as.numeric(), nt_ent = as.numeric(), nt_rent = as.numeric(),
nt_lam = as.numeric(), nt_tt = as.numeric())
t_parameter_data <- data.frame(record_id = as.character(), t_radius = as.numeric(), t_emddim = as.numeric(),
t_delay = as.numeric(), t_rr = as.numeric(), t_det = as.numeric(), t_nrline = as.numeric(),
t_maxl = as.numeric(), t_l = as.numeric(), t_ent = as.numeric(), t_rent = as.numeric(),
t_lam = as.numeric(), t_tt = as.numeric())
for (file in rsa_files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings='')
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
if (nrow(nt) > 0) {
nt_cg_rsa <- nt$rsa_win15_cg
nt_child_rsa <- nt$rsa_win15_child
nt_params <- optimizeParam(nt_cg_rsa, nt_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
nt_res <- crqa(nt_cg_rsa, nt_child_rsa, embed = nt_params$emddim, delay = nt_params$delay,
radius = nt_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
nt_temp <- data.frame(record_id = id, nt_radius = nt_params$radius, nt_emddim = nt_params$emddim, nt_delay = nt_params$delay,
nt_rr = nt_res$RR, nt_det = nt_res$DET, nt_nrline = nt_res$NRLINE,
nt_maxl = nt_res$maxL, nt_l = nt_res$L, nt_ent = nt_res$ENTR, nt_rent = nt_res$rENTR,
nt_lam = nt_res$LAM, nt_tt = nt_res$TT)
nt_parameter_data <- full_join(nt_parameter_data, nt_temp)
}
if (nrow(t) > 0) {
t_cg_rsa <- t$rsa_win15_cg
t_child_rsa <- t$rsa_win15_child
t_params <- optimizeParam(t_cg_rsa, t_child_rsa, par, min.rec = 1.8, max.rec = 2.2)
t_res <- crqa(t_cg_rsa, t_child_rsa, embed = t_params$emddim, delay = t_params$delay,
radius = t_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
t_temp <- data.frame(record_id = id, t_radius = t_params$radius, t_emddim = t_params$emddim, t_delay = t_params$delay,
t_rr = t_res$RR, t_det = t_res$DET, t_nrline = t_res$NRLINE,
t_maxl = t_res$maxL, t_l = t_res$L, t_ent = t_res$ENTR, t_rent = t_res$rENTR,
t_lam = t_res$LAM, t_tt = t_res$TT)
t_parameter_data <- full_join(t_parameter_data, t_temp)
}
}
par = list(
method = "crqa",
metric = "euclidean",
maxlag = 20,
radiusspan = 250,
radiussample = 100,
normalize = 0,
rescale = 4,
mindiagline = 10,
minvertline = 10,
tw = 0,
whiteline = FALSE,
recpt = FALSE,
side = "both",
datatype = "continuous",
fnnpercent = NA,  # Set as needed
typeami = "mindip",  # or other option as needed
nbins = 50,
criterion = "firstBelow",  # or other option as needed
threshold = 1,  # Set as needed
maxEmb = 20,
numSamples = 500,
Rtol = 10,  # Set as needed
Atol = 2  # Set as needed
)
#FOR LOOP
nt_parameter_data <- data.frame(record_id = as.character(), nt_radius = as.numeric(), nt_emddim = as.numeric(),
nt_delay = as.numeric(), nt_rr = as.numeric(), nt_det = as.numeric(), nt_nrline = as.numeric(),
nt_maxl = as.numeric(), nt_l = as.numeric(), nt_ent = as.numeric(), nt_rent = as.numeric(),
nt_lam = as.numeric(), nt_tt = as.numeric())
t_parameter_data <- data.frame(record_id = as.character(), t_radius = as.numeric(), t_emddim = as.numeric(),
t_delay = as.numeric(), t_rr = as.numeric(), t_det = as.numeric(), t_nrline = as.numeric(),
t_maxl = as.numeric(), t_l = as.numeric(), t_ent = as.numeric(), t_rent = as.numeric(),
t_lam = as.numeric(), t_tt = as.numeric())
for (file in rsa_files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings='')
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
if (nrow(nt) > 0) {
nt_cg_rsa <- nt$rsa_win15_cg
nt_child_rsa <- nt$rsa_win15_child
nt_params <- optimizeParam(nt_cg_rsa, nt_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
nt_res <- crqa(nt_cg_rsa, nt_child_rsa, embed = nt_params$emddim, delay = nt_params$delay,
radius = nt_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
nt_temp <- data.frame(record_id = id, nt_radius = nt_params$radius, nt_emddim = nt_params$emddim, nt_delay = nt_params$delay,
nt_rr = nt_res$RR, nt_det = nt_res$DET, nt_nrline = nt_res$NRLINE,
nt_maxl = nt_res$maxL, nt_l = nt_res$L, nt_ent = nt_res$ENTR, nt_rent = nt_res$rENTR,
nt_lam = nt_res$LAM, nt_tt = nt_res$TT)
nt_parameter_data <- full_join(nt_parameter_data, nt_temp)
}
if (nrow(t) > 0) {
t_cg_rsa <- t$rsa_win15_cg
t_child_rsa <- t$rsa_win15_child
t_params <- optimizeParam(t_cg_rsa, t_child_rsa, par, min.rec = 1.8, max.rec = 2.2)
t_res <- crqa(t_cg_rsa, t_child_rsa, embed = t_params$emddim, delay = t_params$delay,
radius = t_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
t_temp <- data.frame(record_id = id, t_radius = t_params$radius, t_emddim = t_params$emddim, t_delay = t_params$delay,
t_rr = t_res$RR, t_det = t_res$DET, t_nrline = t_res$NRLINE,
t_maxl = t_res$maxL, t_l = t_res$L, t_ent = t_res$ENTR, t_rent = t_res$rENTR,
t_lam = t_res$LAM, t_tt = t_res$TT)
t_parameter_data <- full_join(t_parameter_data, t_temp)
}
}
par = list(
method = "crqa",
metric = "euclidean",
maxlag = 20,
radiusspan = 250,
radiussample = 100,
normalize = 0,
rescale = 4,
mindiagline = 10,
minvertline = 10,
tw = 0,
whiteline = FALSE,
recpt = FALSE,
side = "both",
datatype = "continuous",
fnnpercent = NA,  # Set as needed
typeami = "mindip",  # or other option as needed
nbins = 50,
criterion = "firstBelow",  # or other option as needed
threshold = 1,  # Set as needed
maxEmb = 20,
numSamples = 500,
Rtol = 10,  # Set as needed
Atol = 2  # Set as needed
)
#FOR LOOP
nt_parameter_data <- data.frame(record_id = as.character(), nt_radius = as.numeric(), nt_emddim = as.numeric(),
nt_delay = as.numeric(), nt_rr = as.numeric(), nt_det = as.numeric(), nt_nrline = as.numeric(),
nt_maxl = as.numeric(), nt_l = as.numeric(), nt_ent = as.numeric(), nt_rent = as.numeric(),
nt_lam = as.numeric(), nt_tt = as.numeric())
t_parameter_data <- data.frame(record_id = as.character(), t_radius = as.numeric(), t_emddim = as.numeric(),
t_delay = as.numeric(), t_rr = as.numeric(), t_det = as.numeric(), t_nrline = as.numeric(),
t_maxl = as.numeric(), t_l = as.numeric(), t_ent = as.numeric(), t_rent = as.numeric(),
t_lam = as.numeric(), t_tt = as.numeric())
for (file in rsa_files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings='')
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
if (nrow(nt) > 0) {
nt_cg_rsa <- nt$rsa_win15_cg
nt_child_rsa <- nt$rsa_win15_child
nt_params <- optimizeParam(nt_cg_rsa, nt_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
nt_res <- crqa(nt_cg_rsa, nt_child_rsa, embed = nt_params$emddim, delay = nt_params$delay,
radius = nt_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
nt_temp <- data.frame(record_id = id, nt_radius = nt_params$radius, nt_emddim = nt_params$emddim, nt_delay = nt_params$delay,
nt_rr = nt_res$RR, nt_det = nt_res$DET, nt_nrline = nt_res$NRLINE,
nt_maxl = nt_res$maxL, nt_l = nt_res$L, nt_ent = nt_res$ENTR, nt_rent = nt_res$rENTR,
nt_lam = nt_res$LAM, nt_tt = nt_res$TT)
nt_parameter_data <- full_join(nt_parameter_data, nt_temp)
}
if (nrow(t) > 0) {
t_cg_rsa <- t$rsa_win15_cg
t_child_rsa <- t$rsa_win15_child
t_params <- optimizeParam(t_cg_rsa, t_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
t_res <- crqa(t_cg_rsa, t_child_rsa, embed = t_params$emddim, delay = t_params$delay,
radius = t_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 0, tw = 0)
t_temp <- data.frame(record_id = id, t_radius = t_params$radius, t_emddim = t_params$emddim, t_delay = t_params$delay,
t_rr = t_res$RR, t_det = t_res$DET, t_nrline = t_res$NRLINE,
t_maxl = t_res$maxL, t_l = t_res$L, t_ent = t_res$ENTR, t_rent = t_res$rENTR,
t_lam = t_res$LAM, t_tt = t_res$TT)
t_parameter_data <- full_join(t_parameter_data, t_temp)
}
}
full_data <- nt_parameter_data %>%
full_join(t_parameter_data)
summary(full_data$nt_det)
summary(full_data$t_det)
t.test(full_data$nt_det, full_data$t_det)
t.test(full_data$nt_l, full_data$t_l)
t.test(full_data$nt_nrline, full_data$t_nrline)
t.test(full_data$nt_lam, full_data$t_lam)
t.test(full_data$nt_tt, full_data$t_tt)
library(tidyverse)
library(crqa)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Data/4 Months/Heart Rate Data/Freeplay/RSA Files")
rsa_files <- list.files(pattern='dyad')
#file <- rsa_files[30]
#optimizeParam parameters
par = list(
method = "crqa",
metric = "euclidean",
maxlag = 20,
radiusspan = 250,
radiussample = 100,
normalize = 1,
rescale = 4,
mindiagline = 10,
minvertline = 10,
tw = 0,
whiteline = FALSE,
recpt = FALSE,
side = "both",
datatype = "continuous",
fnnpercent = NA,  # Set as needed
typeami = "mindip",  # or other option as needed
nbins = 50,
criterion = "firstBelow",  # or other option as needed
threshold = 1,  # Set as needed
maxEmb = 20,
numSamples = 500,
Rtol = 10,  # Set as needed
Atol = 2  # Set as needed
)
#FOR LOOP
nt_parameter_data <- data.frame(record_id = as.character(), nt_radius = as.numeric(), nt_emddim = as.numeric(),
nt_delay = as.numeric(), nt_rr = as.numeric(), nt_det = as.numeric(), nt_nrline = as.numeric(),
nt_maxl = as.numeric(), nt_l = as.numeric(), nt_ent = as.numeric(), nt_rent = as.numeric(),
nt_lam = as.numeric(), nt_tt = as.numeric())
t_parameter_data <- data.frame(record_id = as.character(), t_radius = as.numeric(), t_emddim = as.numeric(),
t_delay = as.numeric(), t_rr = as.numeric(), t_det = as.numeric(), t_nrline = as.numeric(),
t_maxl = as.numeric(), t_l = as.numeric(), t_ent = as.numeric(), t_rent = as.numeric(),
t_lam = as.numeric(), t_tt = as.numeric())
for (file in rsa_files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings='')
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
if (nrow(nt) > 0) {
nt_cg_rsa <- nt$rsa_win15_cg
nt_child_rsa <- nt$rsa_win15_child
nt_params <- optimizeParam(nt_cg_rsa, nt_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
nt_res <- crqa(nt_cg_rsa, nt_child_rsa, embed = nt_params$emddim, delay = nt_params$delay,
radius = nt_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 1, tw = 0)
nt_temp <- data.frame(record_id = id, nt_radius = nt_params$radius, nt_emddim = nt_params$emddim, nt_delay = nt_params$delay,
nt_rr = nt_res$RR, nt_det = nt_res$DET, nt_nrline = nt_res$NRLINE,
nt_maxl = nt_res$maxL, nt_l = nt_res$L, nt_ent = nt_res$ENTR, nt_rent = nt_res$rENTR,
nt_lam = nt_res$LAM, nt_tt = nt_res$TT)
nt_parameter_data <- full_join(nt_parameter_data, nt_temp)
}
if (nrow(t) > 0) {
t_cg_rsa <- t$rsa_win15_cg
t_child_rsa <- t$rsa_win15_child
t_params <- optimizeParam(t_cg_rsa, t_child_rsa, par, min.rec = 1.9, max.rec = 2.1)
t_res <- crqa(t_cg_rsa, t_child_rsa, embed = t_params$emddim, delay = t_params$delay,
radius = t_params$radius, rescale = 4, mindiagline = 10, minvertline = 10,
normalize = 1, tw = 0)
t_temp <- data.frame(record_id = id, t_radius = t_params$radius, t_emddim = t_params$emddim, t_delay = t_params$delay,
t_rr = t_res$RR, t_det = t_res$DET, t_nrline = t_res$NRLINE,
t_maxl = t_res$maxL, t_l = t_res$L, t_ent = t_res$ENTR, t_rent = t_res$rENTR,
t_lam = t_res$LAM, t_tt = t_res$TT)
t_parameter_data <- full_join(t_parameter_data, t_temp)
}
}
full_data <- nt_parameter_data %>%
full_join(t_parameter_data)
View(full_data)
setwd("/Volumes/ISLAND/User_Folders/Amy_Hume/ISDP 2024/Data")
write_csv(full_data, 'crqa_dataset.csv', na="")
library(tidyverse)
library(tseries)
library(crqa)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Data/4 Months/Heart Rate Data/Freeplay/RSA Files")
options(scipen=999)
files <- list.files(pattern='dyad')
desc_rsa <- data.frame(record_id = as.character(),
n_cg_mean_nt = as.numeric(),  n_cg_sd_nt = as.numeric(),  n_child_mean_nt = as.numeric(),  n_child_sd_nt = as.numeric(),
n_cg_mean_t = as.numeric(),  n_cg_sd_t = as.numeric(),  n_child_mean_t = as.numeric(),  n_child_sd_t = as.numeric())
for (file in files) {
id <- substr(file, start = 1, stop = 3)
data <- read.csv(file, na.strings="")
data$norm_cg = scale(data$rsa_win15_cg)
data$norm_child = scale(data$rsa_win15_child)
nt <- filter(data, condition == 'notoy')
t <- filter(data, condition == 'toy')
#NOTOY
cg_mean_nt = mean(nt$rsa_win15_cg, na.rm=T)
cg_sd_nt = sd(nt$rsa_win15_cg, na.rm=T)
child_mean_nt = mean(nt$rsa_win15_child, na.rm=T)
child_sd_nt = sd(nt$rsa_win15_child, na.rm=T)
n_cg_mean_nt = mean(nt$norm_cg, na.rm=T)
n_cg_sd_nt = sd(nt$norm_cg, na.rm=T)
n_child_mean_nt = mean(nt$norm_child, na.rm=T)
n_child_sd_nt = sd(nt$norm_child, na.rm=T)
#TOY
cg_mean_t = mean(t$rsa_win15_cg, na.rm=T)
cg_sd_t = sd(t$rsa_win15_cg, na.rm=T)
child_mean_t = mean(t$rsa_win15_child, na.rm=T)
child_sd_t = sd(t$rsa_win15_child, na.rm=T)
n_cg_mean_t = mean(t$norm_cg, na.rm=T)
n_cg_sd_t = sd(t$norm_cg, na.rm=T)
n_child_mean_t = mean(t$norm_child, na.rm=T)
n_child_sd_t = sd(t$norm_child, na.rm=T)
temp_data <- data.frame(record_id = id,
n_cg_mean_nt = n_cg_mean_nt,  n_cg_sd_nt = n_cg_sd_nt,  n_child_mean_nt = n_child_mean_nt,  n_child_sd_nt = n_child_sd_nt,
n_cg_mean_t = n_cg_mean_t,  n_cg_sd_t = n_cg_sd_t,  n_child_mean_t = n_child_mean_t,  n_child_sd_t = n_child_sd_t)
desc_rsa <- full_join(desc_rsa, temp_data)
}
desc_rsa <- desc_rsa %>%
mutate(across(everything(), ~ ifelse(is.nan(.), NA, .)))
write_csv(desc_rsa, 'rsa_descriptives_norm.csv', na="")
library(OrcaData2)
#'variables to pull:
#'annual income, people in home (calculate itn), education
#'child age / caregiver age
#'zipcode - rurality
#'other demo: caregiver race
#'
#'SURVEY DATA
#'epds, pbq, pss, stai, social support?
token <- '25120FD84FFDA3B220617BDF23B680CD'
epds = get_orca_data(token, "edinburgh_postnatal_depression_scale", form_complete = T)
timepoint='orca_4month_arm_1'
timestamp=T
epds <- dplyr::filter(epds, redcap_event_name == timepoint)
View(epds)
colnames(epds)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
