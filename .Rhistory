#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
View(import_file)
sri = '4691'
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
View(import_file)
sri = '4985'
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
#pulling non responders
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
screener_record_id
import_file <- new_pch %>%
rename(screener_record_id = record_id)
View(import_file)
sri
str(import_file$screener_record_id)
import_file$screener_record_id <- as.character(import_file$screener_record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
sri
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file$screener_record_id <- as.character(import_file$screener_record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
View(import_file)
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file$screener_record_id <- as.character(import_file$screener_record_id)
screener_ids
sri = '4931'
nr <- nr %>%
select(-redcap_event_name)
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
srt
sri
sri = '4391'
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
View(import_file)
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
result <- tryCatch(
{
import_data(peach_token, import_file)  # attempt
},
error = function(e) {
warning("Import failed: ", e$message, "\n will not complete enrollment. Fix and start again")
NULL  # return something safe
}
)
peach_enroll <- function(screener_token, peach_token, sri = '4391') {
library(tidyverse)
if (screener_record_id == '') {
print("Cannot process without entering screener record id for who you wish to enroll, e.g. '4657'")
} else {
#pulling non responders
nr <- get_orca_field(screener_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(screener_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(screener_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(screener_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(screener_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(peach_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- import_file %>%
filter(screener_record_id == sri) ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
#IMPORTS PARTICIPANT DATA TO PEACH
import_data(peach_token, import_file)
#IMPORTS ENROLLMENT STATUS BACK TO SCREENER REDCAP
import_file2 <- import_file %>%
select(screener_record_id) %>%
mutate(redcap_event_name = 'orca_screener_arm_1') %>%
mutate(pch_enroll_complete = Sys.Date()) %>%
rename(record_id = screener_record_id)
import_data(screener_token, import_file2)
}
}
peach_enroll(screener_token, peach_token, '4391')
setwd("~/Documents/GitHub/OrcaData2")
roxygen2::roxygenise()
remove.packages('OrcaData2')
devtools::install_github('amyhume/OrcaData2')
library(OrcaData2)
library(tidyverse)
token <- 'B17171C96E09FE75231D605CBCE4B249'
data <- get_all_data(token)
data <- data %>%
select(record_id, redcap_event_name, peach_start_date, pch_inactive, pch_inactive_date, ema_am_survey_complete, ema_pm_survey_complete, pch_survey_perc)
data$study_end_date =  ifelse(data$pch_inactive == 1, data$pch_inactive_date, data$peach_start_date + 95)
View(data)
library(OrcaData2)
library(tidyverse)
token <- 'B17171C96E09FE75231D605CBCE4B249'
data <- get_all_data(token)
data <- data %>%
select(record_id, redcap_event_name, peach_start_date, pch_inactive, pch_inactive_date, ema_am_survey_complete, ema_pm_survey_complete, pch_survey_perc)
data$study_end_date =  ifelse(data$pch_inactive == 1, data$pch_inactive_date, data$peach_start_date + 95)
data <- data %>%
mutate(study_end_date = peach_start_date + 95)
completed_ids <- data %>%
filter(str_detect(record_id, 'pch')) %>%
filter(study_end_date <= Sys.Date() | pch_inactive == 1 ) %>%
filter(is.na(pch_survey_perc))
View(completed_ids)
for (id in 1:nrow(completed_ids)) {
id_data <- data %>%
filter(record_id == completed_ids$record_id[id])
n_surveys_complete = nrow(subset(id_data, ema_am_survey_complete == 2)) + nrow(subset(id_data, ema_pm_survey_complete == 2))
survey_perc = n_surveys_complete / 84 * 100
completed_ids$pch_survey_perc[id] = round(survey_perc, digits=2)
}
completed_ids <- completed_ids %>%
select(record_id, redcap_event_name, pch_survey_perc)
import_data(token, completed_ids)
