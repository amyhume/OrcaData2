rename(record_id = screener_record_id, orca_contact_yesno = send_scheduling_email)
#saving import file as a csv
filename <- paste0('contact_info_update.', Sys.Date(), '.csv')
filename <- gsub("-", '.', filename)
View(import_file)
write_csv(import_file, file.path(".", "REDCap Imports"), filename, na="")
write_csv(import_file, file.path(".", "REDCap Imports", filename), na="")
#importing the import file to redcap - will ask you to check it first
import_data(token, data = import_file)
View(import_file)
import_data(token, data = import_file)
unique_events <- unique(import_file$redcap_event_name)
#pulling existing redcap data
all <- get_all_data(token)
all <- filter(all, redcap_event_name == unique_events)
all <- all[, colnames(all) %in% colnames(data)]
View(all)
test <- all %>%
right_join(data, by=c('record_id', 'redcap_event_name'))
data <- import_file
unique_events <- unique(data$redcap_event_name)
#pulling existing redcap data
all <- get_all_data(token)
all <- filter(all, redcap_event_name == unique_events)
all <- all[, colnames(all) %in% colnames(data)]
View(all)
test <- all %>%
right_join(data, by=c('record_id', 'redcap_event_name'))
View(test)
#ask user to check data import against existing data
print(test); cat("Check the dataset above carefully. columns x represent the existing data contents, column y represents the data that will overwrite\n",
"If column x contains data, this import will OVERWRITE that existing data\n",
"If the cell contents are the same, there is no new data to import")
#ask user to check data import against existing data
print(test, n=Inf); cat("Check the dataset above carefully. columns x represent the existing data contents, column y represents the data that will overwrite\n",
"If column x contains data, this import will OVERWRITE that existing data\n",
"If the cell contents are the same, there is no new data to import")
#devtools::install_github("amyhume/OrcaData2")
library(OrcaData2)
library(tidyverse)
library(openxlsx)
library(redcapAPI)
token <- '950056F36783568FBA0900EFAE8AA4A4'
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
#reading in screener
screener <- read.xlsx("ORCA Screener.xlsx")
#creating import file based on who is marked for contact
import_file <- screener %>%
filter(!is.na(screener_record_id) & is.na(imported_to_redcap)) %>%
mutate(redcap_event_name = 'orca_screener_arm_1') %>%
select(screener_record_id, redcap_event_name, timezone, send_scheduling_email) %>%
rename(record_id = screener_record_id, orca_contact_yesno = send_scheduling_email)
#saving import file as a csv
filename <- paste0('contact_info_update.', Sys.Date(), '.csv')
filename <- gsub("-", '.', filename)
write_csv(import_file, file.path(".", "REDCap Imports", filename), na="")
#importing the import file to redcap - will ask you to check it first
import_data(token, data = import_file)
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-08 23:00:00")
View(screener)
#checking eligibility/fraudulence
screener_checked <- screen_fraudulence(screener)
screener <- screener_checked$data
ineligible_ages <- screener_checked$ineligible_ages
duplicate_contacts <- screener_checked$duplicate_contacts
View(ineligible_ages)
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-08 23:00:00")
master_ages <- read.csv("./Ineligible/ineligible_ages.csv", na.strings="")
master_duplicates <- read.csv("./Ineligible/duplicate_contacts.csv")
write_csv(screener, 'screener.csv', na="")
token <- '950056F36783568FBA0900EFAE8AA4A4'
library(redcapAPI)
url <- 'https://redcap.nyu.edu/api/'
min_date_time = "2024-02-08 23:00:00"
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
View(screener)
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
30*5
30*4
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i]) {
if (screener$current_age[i] <= 135) {
new_row <- screener[i, ]  # Create a duplicate of the current row
screener <- rbind(screener, new_row)
}
}
}
new_row <- screener[1, ]
View(new_row)
screener <- rbind(screener, new_row)
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
#EDIT
screener <- mutate(screener, expected_invite_date = case_when(
child_yesno == 1 ~ child_dob + 90,
pregnant_yesno == 1 ~ due_date + 90
))
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i]) {
if (screener$current_age[i] <= 650) {
new_row <- screener[i, ]
new_row$child_yesno <- NA
new_row$child_dob <- NA
screener$pregnant_yesno <- NA
screener$due_date <- NA
screener <- rbind(screener, new_row)
}
}
}
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i] == 1) {
if (screener$current_age[i] <= 650) {
new_row <- screener[i, ]
new_row$child_yesno <- NA
new_row$child_dob <- NA
screener$pregnant_yesno <- NA
screener$due_date <- NA
screener <- rbind(screener, new_row)
}
}
}
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i] == 1) {
if (screener$current_age[i] <= 650) {
new_row <- screener[i, ]
new_row$child_yesno <- NA
new_row$child_dob <- NA
screener$pregnant_yesno[i] <- NA
screener$due_date[i] <- NA
screener <- rbind(screener, new_row)
}
}
}
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i] == 1) {
if (screener$current_age[i] <= 135) {
new_row <- screener[i, ]
new_row$child_yesno <- NA
new_row$child_dob <- NA
screener$pregnant_yesno[i] <- NA
screener$due_date[i] <- NA
screener <- rbind(screener, new_row)
}
}
}
screener <- mutate(screener, expected_invite_date = case_when(
child_yesno == 1 && current_age <= 135 ~ child_dob + 90,
pregnant_yesno == 1 ~ due_date + 90
))
#EDIT
screener <- mutate(screener, expected_invite_date = case_when(
child_yesno == 1 & current_age <= 135 ~ child_dob + 90,
pregnant_yesno == 1 ~ due_date + 90
))
screener = get_orca_data(token, "orca_screener_survey")
screener = select(screener, -redcap_survey_identifier, -rec_unique_record_id, -orca_screener_survey_complete)
screener = rename(screener,
screener_record_id = record_id,
timestamp = orca_screener_survey_timestamp,
language = rec_language_preference,
caregiver_firstname = rec_caregiver_name,
caregiver_lastname = rec_caregiver_name_last,
phone = rec_phone_number,
texting_okay = rec_phone_number_text,
email = rec_caregiver_email,
over_18 = rec_over_18,
zipcode = rec_address_zipcode,
race_other = rec_race_other,
child_yesno = rec_child_yesno,
child_dob = rec_child_dob,
pregnant_yesno = rec_pregnant_yesno,
due_date = rec_due_date,
twin_yesno = rec_twin,
education = rec_education_level)
screener$timestamp = strptime(screener$timestamp, format = "%Y-%m-%d %H:%M:%S")
min_date_time = strptime(min_date_time, format = "%Y-%m-%d %H:%M:%S")
screener = filter(screener, timestamp > min_date_time)
screener = clean_race(screener)
screener$zipcode <- as.integer(screener$zipcode)
zip_info <- zips()
cities <- city_info()
screener <- left_join(screener, zip_info, by="zipcode")
screener <- left_join(screener, cities, by="location")
screener <- mutate(screener,
rural = ifelse(is.na(population) & !is.na(location), "Y",
ifelse(population >= 50000, "N",
ifelse(population < 50000, "Y", "CHECK"))))
screener <- mutate(screener, non_white = ifelse(race == "White", "N", "Y"))
screener <- mutate(screener, low_ses = ifelse(education == 4, "N",
ifelse(education == 3, "N", "Y")))
screener <- mutate(screener, priority = case_when(
rural == 'N' & non_white == 'N' & low_ses == 'N' ~ 'Low Priority',
rural == 'Y' | non_white == 'Y' | low_ses == 'Y' ~ 'High Priority'
))
screener$current_age <- as.numeric(difftime(Sys.Date(), screener$child_dob, units = 'days'))
for (i in 1:nrow(screener)){
if (screener$child_yesno[i] == 1 & screener$pregnant_yesno[i] == 1) {
if (screener$current_age[i] <= 135) {
new_row <- screener[i, ]
new_row$child_yesno <- NA
new_row$child_dob <- NA
screener$pregnant_yesno[i] <- NA
screener$due_date[i] <- NA
screener <- rbind(screener, new_row)
}
}
}
screener <- mutate(screener, expected_invite_date = case_when(
child_yesno == 1 & current_age <= 135 ~ child_dob + 90,
pregnant_yesno == 1 ~ due_date + 90
))
screener <- unite(screener, caregiver_name, caregiver_firstname, caregiver_lastname, sep = " ", na.rm = TRUE)
screener$texting_okay <- gsub(1, "Yes", screener$texting_okay)
screener$texting_okay <- gsub(0, "No", screener$texting_okay)
screener$over_18 <- gsub(1, "Yes", screener$over_18)
screener$over_18 <- gsub(0, "No", screener$over_18)
screener$language <- gsub(1, "English", screener$language)
screener$language <- gsub(2, "Spanish", screener$language)
screener$language <- gsub(3, "Other (check redcap)", screener$language)
screener <- filter(screener, bot_check == 3)
col_order <- c("screener_record_id", "caregiver_name", "language", "phone", "texting_okay", "email", "over_18", "zipcode", "child_yesno", "child_dob", "pregnant_yesno", "due_date","twin_yesno", "timestamp","timezone", "location", "rural", "non_white", "low_ses", "priority", "expected_invite_date")
screener <- screener[, col_order]
screener <- dplyr::arrange(screener, timestamp)
View(screener)
data <- screener
View(data)
data <- rbind(data, new_row)
View(new_row)
new_row <- data[1, ]
data <- rbind(data, new_row)
data <- data %>%
group_by(email) %>%
mutate(duplicate_email = ifelse(!is.na(email) & !duplicated(screener_record_id) & n() > 1, 1, 0)) %>%
ungroup() %>%
group_by(phone) %>%
mutate(duplicate_phone = ifelse(!is.na(phone) & !duplicated(screener_record_id) & n() > 1, 1, 0)) %>%
ungroup()
data <- data %>%
group_by(email)
View(data)
print(n())
duplicated(data$email)
duplicated(data$phone)
data <- data %>%
mutate(duplicate_email = ifelse(duplicated(email) & !duplicated(screener_record_id), 1, 0))
View(data)
data <- data %>%
mutate(duplicate_email = ifelse(duplicated(email) & !duplicated(screener_record_id), 1, 0),
duplicate_phone = ifelse(duplicated(phone) & !duplicated(screener_record_id), 1, 0))
View(data)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
remove.packages("OrcaData2")
