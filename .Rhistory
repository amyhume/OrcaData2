filter(redcap_event_name == 'prenatal_surveys_arm_1') %>%
select(record_id, prenatal_comp_date)
prams_comp <- prams_comp %>%
filter(prams_complete == 2) %>%
left_join(comps, by='record_id')
csv <- read.csv('prenatal_comp_import_5.31.24.csv', na.strings="")
csv$prenatal_comp_date <- as.Date(csv$prenatal_comp_date, format="%m/%d/%y")
comps <- get_orca_data(token, form='prenatal_compensation', form_complete=F)
prams_comp <- get_orca_field(token, field='prams_complete')
comps <- comps %>%
filter(redcap_event_name == 'prenatal_surveys_arm_1') %>%
select(record_id, prenatal_comp_date)
prams_comp <- prams_comp %>%
filter(prams_complete == 2) %>%
left_join(comps, by='record_id') %>%
rename(date2 = prenatal_comp_date) %>%
select(-redcap_event_name)
test <- csv %>%
left_join(prams_comp, by='record_id')
View(test)
csv <- csv %>%
mutate(redcap_event_name = 'prenatal_surveys_arm_1')
import_data(token, csv)
write_csv(csv,'prenatal_comp_import_5.31.24.csv')
#BATCH PROCESSING FOR QUILS RAW DATA
#Created by: AMH, 8/25/23
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/COPE/Data/42 Months/QUILS")
master <- read.csv("42m QUILS Data.csv", na="")
answers <- read.csv("./Scoring Files/quils_answers.csv", na.strings="")
area_standards <- read.csv("./Scoring Files/area_standards.csv", na.strings="")
total_standards <- read.csv("./Scoring Files/total_standard.csv", na.strings = "")
#renaming files
files <- list.files(pattern = ".csv")
files <- files[files != "42m QUILS Data.csv"]
for (file in files) {
data <- read.csv(file, na.strings = "")
id <- as.character(data$Student.ID)
file.rename(file, paste0(id, "_42_quils.csv"))
}
files <- list.files(pattern = ".csv")
files <- files[files != "42m QUILS Data.csv"]
files <- files[!str_detect(files, "N182")]
#FOR LOOP TO CALCULATE CORRECT ANSWERS AND SAVE CLEANED FILE----
for (file in files) {
id <- sub("^(.*?)_.*", "\\1", file)
data <- read.csv(file, na.strings = "")
date <- data$First.Access
screening_complete <- ifelse(data$Status == 'Completed', 1, 0)
data <- data %>%
select(-Student.ID, -First.Access,-Days.Since.Screening, -Status)
#transposing data file & cleaning
data <- data.frame(t(data))
data <- data %>%
rownames_to_column(var="item_number") %>%
rename(answer = t.data.)
data$item_number <- gsub("Q","", data$item_number)
if (screening_complete == 0) {
data <- data %>%
mutate(has_non_zero_follow_up = lead(answer !=0, default = F)) %>%
filter(!(answer == 0 & !has_non_zero_follow_up)) %>%
select(-has_non_zero_follow_up)
}
#merging with answers file
final <- answers %>%
left_join(data, by="item_number") %>%
filter(!str_detect(item_number, "P"))
#calculating correct answers
final <- final %>%
mutate(correct = ifelse(answer == correct_position, 1, 0)) %>%
mutate(score = case_when(
str_detect(item_number, "B") ~ ifelse(
correct == 1 & lag(correct) == 1, 1, 0
),
str_detect(item_number, "A") ~ 0,
!str_detect(item_number, "[AB$]") ~ ifelse(
correct == 1, 1, 0
)
))
#saving cleaned answer sheet
write_csv(final, file.path("./Cleaned Answer Sheets", paste0(id, "_42_quils_answers.csv")), na="")
#calculating number of items answered per area
total_answered <- nrow(subset(final, !is.na(answer) & value == 1))
vocab_answered <- nrow(subset(final, !is.na(answer) & area=="Vocab" & value == 1))
syntax_answered <- nrow(subset(final, !is.na(answer) & area=="Syntax" & value == 1))
process_answered <- nrow(subset(final, !is.na(answer) & area=="Process" & value == 1))
#summing raw scores
total_score <- sum(final$score, na.rm = T)
vocab_score <- sum(subset(final, area == "Vocab", select = score)$score, na.rm = TRUE)
syntax_score <- sum(subset(final, area == "Syntax", select = score)$score, na.rm = TRUE)
process_score <- sum(subset(final, area == "Process", select = score)$score, na.rm = TRUE)
#creating final_perc data frame
final_perc <- data.frame(
record_id = c(id, id, id, id),
datetime = c(date, date, date, date),
screening_complete = c(screening_complete, screening_complete, screening_complete, screening_complete),
area = c('total', 'vocab', 'syntax', 'process'),
score = c(total_score, vocab_score, syntax_score, process_score),
items_answered = c(total_answered, vocab_answered, syntax_answered, process_answered)
)
final_perc <- final_perc %>%
mutate(perc_correct = (score/items_answered)*100)
#calculating area standardised scores & percentile ranks
final_perc <- final_perc %>%
mutate(standard_scores = case_when(
area == 'vocab' ~ area_standards$vocab_standard[area_standards$raw_score == vocab_score],
area == 'syntax' ~ area_standards$syntax_standard[area_standards$raw_score == syntax_score],
area == 'process' ~ area_standards$process_standard[area_standards$raw_score == process_score]
)) %>%
mutate(percentile_ranks = case_when(
area == 'vocab' ~ area_standards$vocab_percentile[area_standards$raw_score == vocab_score],
area == 'syntax' ~ area_standards$syntax_percentile[area_standards$raw_score == syntax_score],
area == 'process' ~ area_standards$process_percentile[area_standards$raw_score == process_score]
))
#total standard scores and percentile ranks/section complete & cut offs
total_area_standard <- sum(final_perc$standard_scores, na.rm=T)
final_perc <- final_perc %>%
mutate(standard_scores = ifelse(area == 'total',
total_standards$total_standard[total_area_standard >= total_standards$area_standard_lb & total_area_standard <= total_standards$area_standard_ub],
standard_scores)) %>%
mutate(percentile_ranks = ifelse(area == 'total',
total_standards$total_percentile[total_area_standard >= total_standards$area_standard_lb & total_area_standard <= total_standards$area_standard_ub],
percentile_ranks)) %>%
mutate(section_complete = case_when(
area == 'total' ~ (items_answered/48)*100,
area == 'vocab' ~ (items_answered/16)*100,
area == 'syntax' ~ (items_answered/16)*100,
area == 'process' ~ (items_answered/16)*100
)) %>%
mutate(below_cutoff = case_when(
area == 'total' ~ ifelse(standard_scores < 86, 1, 0),
area == 'vocab' ~ ifelse(standard_scores < 85, 1, 0),
area == 'syntax' ~ ifelse(standard_scores < 83, 1, 0),
area == 'process' ~ ifelse(standard_scores < 82, 1, 0)
))
final_perc <- final_perc %>%
mutate(standard_scores = ifelse(section_complete == 100, standard_scores, NA),
percentile_ranks = ifelse(section_complete == 100, percentile_ranks, NA))
master <- master %>%
full_join(final_perc)
file.rename(file, file.path("./Processed Raw Files", file))
}
#checking
master <- master %>%
mutate(error = ifelse(
screening_complete == 1 & (is.na(standard_scores) | is.na(percentile_ranks)), 1, 0
))
if (sum(master$error) != 0) {
print("DID NOT SAVE MASTER - Standard scores/percentiles incorrectly missed for record IDs:")
for (i in 1:nrow(master)) {
if (master$error[i] == 1) {
print(master$record_id[i])
}
}
} else {
print("no errors :)")
master <- master %>%
select(-error)
write.csv(master, "42m QUILS Data.csv", na="", row.names = F)
}
#PLOT
hist <- master %>%
filter(is.finite(percentile_ranks)) %>%
ggplot(aes(x=percentile_ranks)) +
geom_rect(xmin = 0, xmax = 25, ymin = -Inf, ymax = Inf, fill = '#F5F5F5', alpha = 0.5) +
geom_vline(xintercept = 25, linetype='dashed')+
geom_histogram(fill='#C8A2C8', color='black', binwidth = 2) +
geom_text(aes(x = 20, y = 13, label = 'cut-off'), color = 'black', size = 4) +
theme(
legend.position = "none",
panel.grid = element_blank(),
panel.background = element_rect(fill="white"),
panel.border = element_rect(color="black", fill=NA, linewidth = 0.9),
axis.ticks = element_line(linewidth = 0.7),
axis.title = element_text(size=12, family="Arial"),
axis.text = element_text(size=10, family="Arial")
) +
labs(x='Percentile Rank', y='Count')
hist
View(master)
library(dplyr)
library(OrcaData2)
token <- '25120FD84FFDA3B220617BDF23B680CD'
get_orca_field(token, field='agein_8m')
x = get_orca_field(token, field='agein_8m')
View(x)
dobs <- get_orca_field(token, field='child_dob')
contact <- get_orca_field(token, field='longitudinal_yesno')
View(contact)
dobs$child_dob <- as.Date(dobs$child_dob, format='%Y-%m-%d')
dobs$agein_8m <- dobs$child_dob + 229
View(dobs)
dobs$agein_12m <- dobs$child_dob + 350
View(contact)
View(contact)
dobs <- dobs %>%
left_join(contact, by='record_id')
dobs <- get_orca_field(token, field='child_dob')
contact <- get_orca_field(token, field='longitudinal_yesno')
dobs$child_dob <- as.Date(dobs$child_dob, format='%Y-%m-%d')
dobs$agein_8m <- dobs$child_dob + 229
dobs$agein_12m <- dobs$child_dob + 350
dobs <- dobs %>%
left_join(contact, by='record_id') %>%
select(-redcap_event_name.x, -redcap_event_name.y)
}
dobs <- get_orca_field(token, field='child_dob')
contact <- get_orca_field(token, field='longitudinal_yesno')
dobs$child_dob <- as.Date(dobs$child_dob, format='%Y-%m-%d')
dobs$agein_8m <- dobs$child_dob + 229
dobs$agein_12m <- dobs$child_dob + 350
dobs <- dobs %>%
left_join(contact, by='record_id') %>%
select(-redcap_event_name.x, -redcap_event_name.y)
dobs <- get_orca_field(token, field='child_dob')
contact <- get_orca_field(token, field='longitudinal_yesno')
dobs$child_dob <- as.Date(dobs$child_dob, format='%Y-%m-%d')
dobs$agein_8m <- dobs$child_dob + 229
dobs$agein_12m <- dobs$child_dob + 350
dobs <- dobs %>%
left_join(contact, by='record_id') %>%
select(-redcap_event_name.x, -redcap_event_name.y) %>%
filter(longitudinal_yesno == 1)
get_orca_ageins <- function(token) {
library(dplyr)
dobs <- get_orca_field(token, field='child_dob')
contact <- get_orca_field(token, field='longitudinal_yesno')
dobs$child_dob <- as.Date(dobs$child_dob, format='%Y-%m-%d')
dobs$agein_8m <- dobs$child_dob + 229
dobs$agein_12m <- dobs$child_dob + 350
dobs <- dobs %>%
left_join(contact, by='record_id') %>%
select(-redcap_event_name.x, -redcap_event_name.y) %>%
filter(longitudinal_yesno == 1)
return(dobs)
}
View(dobs)
#8 month chart
dobs$agein_8m_m <- month(dobs$agein_8m)
library(lubridate)
#8 month chart
dobs$agein_8m_m <- month(dobs$agein_8m, label=True)
#8 month chart
dobs$agein_8m_m <- month(dobs$agein_8m, label=T)
View(dobs)
agein_months_8m <- data.frame(table(dobs$agein_8m_m))
View(agein_months_8m)
dobs$agein_12m_m <- month(dobs$agein_12m, label=T)
agein_months_12m <- data.frame(table(dobs$agein_12m_m))
View(agein_months_12m)
#8 month chart
dobs$agein_8m_m <- paste0(month(dobs$agein_8m, label=T), "_", year(dobs$agein_8m))
View(dobs)
dobs$agein_12m_m <- paste0(month(dobs$agein_12m, label=T), year(dobs$agein_8m))
agein_months_8m <- data.frame(table(dobs$agein_8m_m))
agein_months_12m <- data.frame(table(dobs$agein_12m_m))
View(agein_months_8m)
View(agein_months_12m)
#8 month chart
dobs$agein_8m_m <- c(month(dobs$agein_8m, label=T), year(dobs$agein_8m))
#8 month chart
dobs$agein_8m_m <- cmonth(dobs$agein_8m, label=T), year(dobs$agein_8m)
dobs$agein_8m_y <- year(dobs$agein_8m)
#8 month chart
dobs$agein_8m_m <- month(dobs$agein_8m, label=T)
dobs$agein_8m_y <- year(dobs$agein_8m)
agein_months_8m <- data.frame(table(dobs$agein_8m_m, dobs$agein_8m_y))
View(agein_months_8m)
dobs$agein_12m_m <- month(dobs$agein_12m, label=T)
dobs$agein_12m_y <- year(dobs$agein_12m)
agein_months_12m <- data.frame(table(dobs$agein_12m_m, dobs$agein_12m_y))
install.packages('calendR')
#8m invite summary
invite_summary <- dobs %>%
group_by(agein_8m) %>%
summarise(invites = n())
View(invite_summary)
all_dates <- data.frame(date = seq.Date(from = as.Date("2024-01-01"), to = as.Date("2024-12-31"), by = "day"))
calendar_data <- all_dates %>%
left_join(invite_summary, by = c("date" = "invite_date")) %>%
mutate(invites = replace_na(invites, 0))
calendar_data <- all_dates %>%
left_join(invite_summary, by = c("date" = "agein_8m")) %>%
mutate(invites = replace_na(invites, 0))
library(tidyverse)
calendar_data <- all_dates %>%
left_join(invite_summary, by = c("date" = "agein_8m")) %>%
mutate(invites = replace_na(invites, 0))
View(calendar_data)
invite_counts <- calendar_data$invites
calendR(year = 2024, special.days = invite_counts, gradient = TRUE, low.col = "white", high.col = "blue")
library(calendR)
calendR(year = 2024, special.days = invite_counts, gradient = TRUE, low.col = "white", high.col = "blue")
calendR(year = 2024, special.days = invite_counts, gradient = TRUE)
calendR(year = 2024, special.days = invite_counts, gradient = TRUE, low.col = "white", special.col = "#FF4600")
calendR(year = 2024, special.days = invite_counts, gradient = TRUE, low.col = "white", special.col = "#FF4600",
legend.pos = "top")
invite_summary12 <- dobs %>%
group_by(agein_12m) %>%
summarise(invites = n())
all_dates12 <- data.frame(date = seq.Date(from = as.Date("2024-01-01"), to = as.Date("2024-12-31"), by = "day"))
calendar_data12 <- all_dates12 %>%
left_join(invite_summary12, by = c("date" = "agein_12m")) %>%
mutate(invites = replace_na(invites, 0))
invite_counts12 <- calendar_data12$invites
calendR(year = 2024, special.days = invite_counts12, gradient = TRUE, low.col = "white", special.col = "#FF4600",
legend.pos = "top")
calendR(year = 2024, special.days = invite_counts12, gradient = TRUE, low.col = "white", special.col = "darkgreen",
legend.pos = "top")
calendR(year = 2024, special.days = invite_counts, gradient = TRUE, low.col = "white", special.col = "#FF4600",
legend.pos = "top")
calendR(year = 2024, special.days = invite_counts12, gradient = TRUE, low.col = "white", special.col = "darkgreen",
legend.pos = "top")
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/8 Months")
invites <- read.csv('invites.csv', na.strings="")
View(invites)
invites <- invites %>%
select(Record) %>%
rename(record_id = Record)
dobs <- get_orca_field(token, field='child_dob')
token <- '25120FD84FFDA3B220617BDF23B680CD'
demo <- get_orca_data(token, form='sociodemographic')
View(demo)
demo <- demo %>%
select(record_id, child_dob, zip_code)
View(demo)
eligible <- get_orca_field(token, field='longitudinal_yesno')
eligible <- eligible %>%
select(-redcap_event_name)
View(eligible)
View(eligible)
demo <- demo %>%
left_join(eligible, by='record_id')
invites <- read.csv('invites.csv', na.strings="")
invites <- invites %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
#ages & timezone
demo$current_age <- as.numeric(difftime(Sys.Date(), demo$child_dob, units="days"))
View(demo)
demo$timezone <- calculate_timezone(demo$zip_code)
demo <- demo %>%
filter(current_age >= 228 & current_age < 259 & longitudinal_yesno == 1)
View(demo)
invites <- invites %>%
full_join(demo, by='record_id')
invites <- invites %>%
select(record_id, invite_date, zip_code, current_age, timezone)
for (row in 1:nrow(invites)) {
if (is.na(invites$invite_date[row])) {
print(paste0("Invite has not been sent for record ", invites$record_id[row]))
}
}
write_csv(invites, 'invites.csv', na="")
threshold = as.Date("2024-07-08", format="%Y-%m-%d")
invites <- invites %>%
select(record_id, invite_date, zip_code, current_age, timezone) %>%
filter(invite_date <= threshold)
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/8 Months")
token <- '25120FD84FFDA3B220617BDF23B680CD'
threshold = as.Date("2024-07-08", format="%Y-%m-%d")
invites <- read.csv('invites.csv', na.strings="")
invites <- invites %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/8 Months")
token <- '25120FD84FFDA3B220617BDF23B680CD'
threshold = as.Date("2024-07-08", format="%Y-%m-%d")
invites <- read.csv('invites.csv', na.strings="")
invites <- invites %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
demo <- get_orca_data(token, form='sociodemographic')
demo <- demo %>%
select(record_id, child_dob, zip_code)
eligible <- get_orca_field(token, field='longitudinal_yesno')
eligible <- eligible %>%
select(-redcap_event_name)
demo <- demo %>%
left_join(eligible, by='record_id')
#ages & timezone
demo$current_age <- as.numeric(difftime(Sys.Date(), demo$child_dob, units="days"))
demo$timezone <- calculate_timezone(demo$zip_code)
demo <- demo %>%
filter(current_age >= 228 & current_age < 259 & longitudinal_yesno == 1)
invites <- invites %>%
full_join(demo, by='record_id')
invites <- invites %>%
select(record_id, invite_date, child_dob, zip_code, timezone) %>%
filter(invite_date <= threshold)
write_csv(invites, 'invites.csv', na="")
#install.packages("tidyverse") #only have to run this the first time you run it
library(tidyverse)
library(CopeData)
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/42 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
languages <- get_field(token, field = "reentry_language")
languages2 <- get_field(token, field = "bio_pref_language")
timepoints <- get_all_timepoints(token)
timepoints <- timepoints %>%
mutate(infant_6months = case_when(!is.na(infant_6months) ~ 6),
infant_9months = case_when(!is.na(infant_9months) ~ 9),
infant_12months = case_when(!is.na(infant_12months) ~ 12),
infant_18months = case_when(!is.na(infant_18months) ~ 18),
infant_30months = case_when(!is.na(infant_30months) ~ 30),
child_42months = case_when(!is.na(child_42months) ~ 42)) %>%
unite("timepoints_completed", c("infant_6months", "infant_9months",
"infant_12months", "infant_18months", "infant_30months", "child_42months"), sep = "; ", na.rm = T)
#Languages
languages2$bio_pref_language <- gsub(0, "en", languages2$bio_pref_language)
languages2$bio_pref_language <- gsub(1, "es", languages2$bio_pref_language)
languages_total <- languages %>%
full_join(languages2, by="record_id") %>%
mutate(language = ifelse(is.na(reentry_language), bio_pref_language, reentry_language)) %>%
select(record_id, language)
#cleaning invites
invites <- invites %>%
rename(invite_date = Invitation.send.time, record_id = Record) %>%
select(record_id, invite_date)
invites$invite_date <- gsub(" .*", "", invites$invite_date)
invites$invite_date <- as.Date(invites$invite_date, format = "%Y-%m-%d")
invites <- invites %>%
mutate(age_out = invite_date+228)
invites$age_out <- as.Date(invites$age_out, origin = '1970-01-01')
invites$record_id <- as.character(invites$record_id)
invites <- invites %>%
left_join(languages_total, by="record_id") %>%
left_join(timepoints, by="record_id")
invites <- invites %>%
arrange(age_out)
invites <- invites %>%
filter(record_id != '99999999' & record_id != '9999999' & record_id != '99999')
write_csv(invites, 'invites.csv', na='')
#install.packages("tidyverse") #only have to run this the first time you run it
library(tidyverse)
library(CopeData)
setwd("/Volumes/ISLAND/Projects/COPE/R Scripts/30 Month Scripts")
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
invites <- read.csv("invites.csv", na.strings = "")
languages <- get_data(token, form = "birth_update1", form_complete = T) #get a better indicator of language
visits <- get_all_timepoints(token)
visits <- visits %>%
select(record_id, infant_6months, infant_12months) %>%
mutate(infant_6months = case_when(!is.na(infant_6months) ~ 6)) %>%
mutate(infant_12months = case_when(!is.na(infant_12months) ~ 12)) %>%
unite("visits_completed", c("infant_6months", "infant_12months"), sep="; ", na.rm=T)
#Languages
languages <- languages %>%
select(record_id, bio_pref_language) %>%
mutate(bio_pref_language = ifelse(bio_pref_language == 0, "English",
ifelse(bio_pref_language == 1, "Spanish",
ifelse(bio_pref_language == 2, "Other", "ERROR"))))
#cleaning invites
invites <- invites %>%
rename(invite_date = Invitation.send.time, record_id = Record) %>%
select(record_id, invite_date)
invites$invite_date <- gsub(" .*", "", invites$invite_date)
invites$invite_date <- as.Date(invites$invite_date, format = "%Y-%m-%d")
invites <- invites %>%
mutate(age_out = invite_date+167)
invites$age_out <- as.Date(invites$age_out, origin = '1970-01-01')
invites <- invites %>%
left_join(languages, by="record_id") %>%
left_join(visits, by="record_id")
write_csv(invites, "invites.csv", na="")
library(OrcaData2)
library(tidyverse)
token <- '25120FD84FFDA3B220617BDF23B680CD'
all_ids <- get_all_data(token)
View(all_ids)
all_ids <- all_ids %>%
distinct(record_id,.keep_all = T) %>%
select(record_id)
View(all_ids)
all_ids <- all_ids %>%
filter(!str_detect(tolower(record_id), 'test') & !str_detect(record_id, 'P'))
View(all_ids)
x <- 1:max(all_ids$record_id)
x <- range(1, max(all_ids$record_id))
View(all_ids)
all_ids <- all_ids %>%
filter(!str_detect(tolower(record_id), 'test') & !str_detect(tolower(record_id), 'p'))
x <- range(1, max(all_ids$record_id))
x <- 1:max(all_ids$record_id)
missing_ids <- as.numeric()
for (n in x) {
if (n %in% all_ids$record_id) {
} else {
missing_ids <- c(missing_ids, n)
}
}
View(all_ids)
x <- min(all_ids$record_id):max(all_ids$record_id)
missing_ids <- as.numeric()
for (n in x) {
if (n %in% all_ids$record_id) {
} else {
missing_ids <- c(missing_ids, n)
}
}
library(dplyr)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
remove.packages("OrcaData2")
devtools::install_github("amyhume/OrcaData2")
