token <- '2338CA1AE27CE6932A075CF7B7931827'
devtools::install_github("amyhume/OrcaData")
library(OrcaData)
dq <- get_orca_data(token, form="data_quality_visit_1")
View(dq)
dq <- get_orca_data(token, form="data_quality_visit_1", form_complete = F)
get_orca_data2 <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
return (df)
}
dq <- get_orca_data2(token, form="data_quality_visit_1", form_complete = F)
url <- 'https://redcap.nyu.edu/api/'
dq <- get_orca_data2(token, form="data_quality_visit_1", form_complete = F)
View(dq)
test_ids <- dq$record_id
View(dq)
library(tidyverse)
test_ids <- test_ids[str_detect(test_ids, 'TEST')]
print(test_ids)
ids <- c('049', '050', '099')
dq <- dq %>%
filter(str_detect(record_id, any(ids)))
dq <- dq %>%
filter(record_id %in% ids)
View(dq)
dq <- get_orca_data2(token, form="data_quality_visit_1", form_complete = F)
dq <- dq %>%
filter(str_detect(record_id, paste(ids, collapse = '|')))
View(dq)
ah <- dq %>%
filter(record_id %in% ids)
ng <- dq %>%
filter(str_detect(record_id, "NG"))
View(ng)
View(ah)
ah <- dq %>%
filter(record_id %in% ids) %>%
filter(redcap_event_name == 'orca_visit_1_arm_1')
View(ah)
ly <- dq %>%
filter(str_detect(record_id, "LY"))
sa <- dq %>%
filter(str_detect(record_id, "SA"))
ah <- dq %>%
filter(record_id %in% ids) %>%
filter(redcap_event_name == 'orca_visit_1_arm_1') %>%
select(record_id, cecile_dq_notes, vpc_dq_score, memory_dq_score, maap_dq_score)
ng <- dq %>%
filter(str_detect(record_id, "NG")) %>%
select(record_id, cecile_dq_notes, vpc_dq_score, memory_dq_score, maap_dq_score)
ah <- dq %>%
filter(record_id %in% ids) %>%
filter(redcap_event_name == 'orca_visit_1_arm_1') %>%
select(record_id, cecile_dq_score, vpc_dq_score, memory_dq_score, maap_dq_score)
ng <- dq %>%
filter(str_detect(record_id, "NG")) %>%
select(record_id, cecile_dq_score, vpc_dq_score, memory_dq_score, maap_dq_score)
ng$record_id <- gsub("TEST_", "", ng$record_id)
ng$record_id <- gsub("_NG", "", ng$record_id)
View(ng)
ah_ng <- ah %>%
left_join(ng, by="record_id")
View(ah_ng)
library(CopeData)
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
library(tidyverse)
notes_42m <- get_data(token, form = 'm_home_visit_notes')
View(notes_42m)
notes_42m <- notes_42m %>%
select(record_id, fnirs_cg_so_42m, fnirs_child_so_42m, fnirs_notes_42m)
View(notes_42m)
notes_42m <- notes_42m %>%
select(record_id, fnirs_cg_so_42m, fnirs_child_so_42m, fnirs_notes_42m) %>%
filter(fnirs_cg_so_42m == 4 | fnirs_child_so_42m == 4)
library(CopeData)
library(tidyverse)
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
get_visit_n(token, timepoint = "child_42months_arm_1")
x <- get_all_timepoints(token)
View(x)
row <- x[2]
as.character(length(row))
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-23 19:19:00")
View(screener)
#checking eligibility/fraudulence
screener_checked <- screen_fraudulence(screener)
screener <- screener_checked$data
ineligible_ages <- screener_checked$ineligible_ages
duplicate_contacts <- screener_checked$duplicate_contacts
impossible_due_dates <- screener_checked$impossible_due_dates
View(impossible_due_dates)
View(ineligible_ages)
master_ages <- read.csv("./Ineligible/ineligible_ages.csv", na.strings="")
master_duplicates <- read.csv("./Ineligible/duplicate_contacts.csv")
fixing_date_formats <- function(data) {
data$child_dob <- as.Date(data$child_dob, format = "%Y-%m-%d")
data$due_date <- as.Date(data$due_date, format = "%Y-%m-%d")
data$expected_invite_date <- as.Date(data$expected_invite_date, format = "%Y-%m-%d")
data$timestamp <- as.POSIXct(data$timestamp, format = "%Y-%m-%dT%H:%M:%SZ")
return(data)
}
master_ages <- fixing_date_formats(master_ages)
master_duplicates <- fixing_date_formats(master_duplicates)
master_ages <- full_join(master_ages, ineligible_ages)
master_duplicates <- full_join(master_duplicates, duplicate_contacts)
View(screener)
write_csv(screener, 'screener.csv', na="")
write_csv(master_ages, "./Ineligible/ineligible_ages.csv", na="")
write_csv(master_duplicates, "./Ineligible/duplicate_contacts.csv", na="")
View(master_ages)
View(master_duplicates)
View(ineligible_ages)
View(impossible_due_dates)
View(duplicate_contacts)
View(screener)
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-23 19:19:00")
View(screener)
View(screener)
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-23 14:19:00")
View(screener)
#checking eligibility/fraudulence
screener_checked <- screen_fraudulence(screener)
screener <- screener_checked$data
ineligible_ages <- screener_checked$ineligible_ages
duplicate_contacts <- screener_checked$duplicate_contacts
impossible_due_dates <- screener_checked$impossible_due_dates
View(screener)
screener$timestamp <- as.character(screener$timestamp)
write_csv(screener, 'screener.csv', na="")
write_csv(screener, 'screener.csv', na="")
View(screener)
View(screener)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
remove.packages("OrcaData2")
#if you haven't downloaded it before
devtools::install_github("amyhume/OrcaData2")
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-26 12:49:33")
View(screener)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
remove.packages("OrcaData2")
#if you haven't downloaded it before
devtools::install_github("amyhume/OrcaData2")
#if you haven't downloaded it before
#devtools::install_github("amyhume/OrcaData2")
#install.packages("tidyverse", "zipcodeR", "maps")
library(OrcaData2)
library(tidyverse)
library(zipcodeR)
library(maps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
screener <- get_orca_screener(token, min_date_time = "2024-02-26 12:49:33")
#checking eligibility/fraudulence
screener_checked <- screen_fraudulence(screener)
View(screener_checked)
screener <- screener_checked$data
ineligible_ages <- screener_checked$ineligible_ages
duplicate_contacts <- screener_checked$duplicate_contacts
impossible_due_dates <- screener_checked$impossible_due_dates
failed_attention_checks <- screener_checked$failed_attention_checks
View(failed_attention_checks)
View(ineligible_ages)
master_ages <- read.csv("./Ineligible/ineligible_ages.csv", na.strings="")
master_duplicates <- read.csv("./Ineligible/duplicate_contacts.csv")
#fixing dates
fixing_date_formats <- function(data) {
data$child_dob <- as.Date(data$child_dob, format = "%Y-%m-%d")
data$due_date <- as.Date(data$due_date, format = "%Y-%m-%d")
data$expected_invite_date <- as.Date(data$expected_invite_date, format = "%Y-%m-%d")
data$timestamp <- as.POSIXct(data$timestamp, format = "%Y-%m-%dT%H:%M:%SZ")
return(data)
}
master_ages <- fixing_date_formats(master_ages)
master_ages <- full_join(master_ages, ineligible_ages)
screener$timestamp <- as.character(screener$timestamp)
write_csv(screener, 'screener.csv', na="")
write_csv(master_ages, "./Ineligible/ineligible_ages.csv", na="")
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
