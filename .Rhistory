select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
View(existing_snowball_comps)
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
View(existing_snowball_comps)
existing_snowball_comps <- existing_snowball_comps %>%
filter(redcap_event_name == "prenatal_surveys_arm_1") %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
View(existing_snowball_comps)
View(existing_snowball_comps)
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
#creating dataframe of ids to compensate
ids_to_compensate <- data.frame(table(snowball$id_to_compensate))
ids_to_compensate <- ids_to_compensate %>%
filter(Var1 != '0') %>%
rename(record_id = Var1, n_referrals = Freq) %>%
mutate(comp_amount = ifelse(n_referrals <= 5, n_referrals*10, 50))
ids_to_compensate$record_id <- as.character(ids_to_compensate$record_id)
ids_to_compensate <- ids_to_compensate %>%
left_join(existing_snowball_comps, by="record_id") %>%
filter(is.na(maxed_out) | maxed_out == 0)
ids_to_compensate <- ids_to_compensate %>%
mutate(prenatal_snowball_number = ifelse(!is.na(prenatal_snowball_number), prenatal_snowball_number + n_referrals, n_referrals),
redcap_event_name = "prenatal_surveys_arm_1")
View(ids_to_compensate)
#Pulling New Snowball Compensations
library(tidyverse)
print(token)
get_new_snowball_responses <- function(token, min_date_time = "2022-01-01 00:00:00") {
library(dplyr)
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
filter(is.na(snowball_comp_resolved)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
#performing manual checks
for (x in 1:nrow(snowball)) {
if (snowball$id_to_compensate[x] == 'manually check' | snowball$id_to_compensate[x] == 'cannot find id') {
cat("Find the screener record ID for the following participant:\n",
paste0("Name: ", snowball$rec_snowball_name[x], "\n"),
paste0("Email: ", snowball$rec_snowball_email[x], "\n"),
"\n",
"If they are not an ORCA particiapnt (e.g. Natalie Brito), enter 0\n",
"If they are a participant from orca 1.0, enter 1.0_id (e.g. 1.0_067)")
response <- readline(prompt = "Enter screener record id: ")
snowball$id_to_compensate[x] <- response
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
#creating dataframe of ids to compensate
ids_to_compensate <- data.frame(table(snowball$id_to_compensate))
ids_to_compensate <- ids_to_compensate %>%
filter(Var1 != '0') %>%
rename(record_id = Var1, n_new_referrals = Freq) %>%
mutate(comp_amount = ifelse(n_new_referrals <= 5, n_new_referrals*10, 50))
ids_to_compensate$record_id <- as.character(ids_to_compensate$record_id)
ids_to_compensate <- ids_to_compensate %>%
left_join(existing_snowball_comps, by="record_id") %>%
filter(is.na(maxed_out) | maxed_out == 0)
ids_to_compensate <- ids_to_compensate %>%
mutate(prenatal_snowball_number = ifelse(!is.na(prenatal_snowball_number), prenatal_snowball_number + n_new_referrals, n_new_referrals),
redcap_event_name = "prenatal_surveys_arm_1")
return(list(snowball_responses = snowball, ids_to_compensate = ids_to_compensate))
}
snowball_list <- get_new_snowball_responses(token)
new_responses <- snowball_list$snowball_responses
to_compensate <- snowball_list$ids_to_compensate
View(to_compensate)
#importing prenatal screener pending compensations
to_compensate_prenatal <- to_compensate %>%
filter(grepl("^\\d+$", record_id)) %>%
select(record_id, redcap_event_name, prenatal_snowball_number)
View(to_compensate_prenatal)
import_data(token, data = to_compensate_prenatal)
to_compensate_prenatal$record_id <- as.character(to_compensate$record_id)
to_compensate <- snowball_list$ids_to_compensate
#importing prenatal screener pending compensations
to_compensate_prenatal <- to_compensate %>%
filter(grepl("^\\d+$", record_id)) %>%
select(record_id, redcap_event_name, prenatal_snowball_number)
to_compensate_prenatal$record_id <- as.character(to_compensate_prenatal$record_id)
import_data(token, data = to_compensate_prenatal)
to_compensate_prenatal$record_id <- as.character(to_compensate_prenatal$record_id)
str(to_compensate_prenatal$record_id)
import_data(token, data = to_compensate_prenatal)
import_data <- function(token, data = data) {
unique_events <- unique(data$redcap_event_name)
#pulling existing redcap data
all <- get_all_data(token)
all <- filter(all, redcap_event_name == unique_events)
all <- all[, colnames(all) %in% colnames(data)]
columns <- colnames(all)[!str_detect(colnames(all), 'record_id') & !str_detect(colnames(all), 'redcap_event_name')]
test <- all %>%
right_join(data, by=c('record_id', 'redcap_event_name'))
#checking columns with conflicts
conflicts_for <- as.character()
for (column in columns) {
column_data <- dplyr::select(test, record_id, redcap_event_name, paste0(column, '.x'), paste0(column, '.y'))
column_data <- dplyr::filter(column_data, !is.na(column_data[3]) & !is.na(column_data[4]))
#prints rows with conflicts that will be overwritten
if (nrow(column_data) >= 1) {
print(paste0('conflict found for field: ', column))
print.data.frame(column_data)
cat("\n")
conflicts_for <- c(conflicts_for, column)
}
}
#ask user to check above conflicts and respond 'y'/'n' to import
if (length(conflicts_for) >= 1) {
cat("Check the datasets above carefully. columns x represent the existing data contents, column y represents the data that will overwrite\n",
"If column x contains data, this import will OVERWRITE that existing data\n",
"If the cell contents are the same, there is no new data to import")
} else {
print('no conflicts found. No datasets will be overwritten')
print(data) ; cat("check the import data carefully")
}
response <- readline(prompt = "Do you want to continue? (y/n): ")
#data import if participant responds y
if (tolower(response) == 'y') {
conn <- redcapConnection(url = url, token = token)
import_status <- importRecords(conn, data = data)
print(paste0("Data import completed for ", import_status, " records"))
} else {
print("Data import terminated.")
}
}
#' @title Pull ORCA Data
#' @description pulls all records & survey responses for ORCA 2.0
#' @param token Unique REDCap API token
#' @return A data frame with all records, survey responses & events
#' @export
get_all_data <- function(token) {
formData <- list("token"=token,
content='record',
action='export',
format='csv',
type='flat',
csvDelimiter='',
rawOrLabel='raw',
rawOrLabelHeaders='raw',
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='json'
)
response <- httr::POST(url, body = formData, encode = "form")
result <- httr::content(response)
return(result)
}
import_data(token, data = to_compensate_prenatal)
data = to_compensate_prenatal
unique_events <- unique(data$redcap_event_name)
#pulling existing redcap data
all <- get_all_data(token)
all <- filter(all, redcap_event_name == unique_events)
all <- all[, colnames(all) %in% colnames(data)]
columns <- colnames(all)[!str_detect(colnames(all), 'record_id') & !str_detect(colnames(all), 'redcap_event_name')]
View(all)
str(all$record_id)
test <- all %>%
right_join(data, by=c('record_id', 'redcap_event_name'))
data$record_id
str(data$record_id)
to_compensate_prenatal$record_id <- as.numeric(to_compensate_prenatal$record_id)
import_data(token, data = to_compensate_prenatal)
View(new_responses)
#importing referee information for snowball responses
new_responses <- new_responses %>%
mutate(snowball_comp_resolved = Sys.Date())
View(new_responses)
#importing referee information for snowball responses
new_responses <- new_responses %>%
mutate(snowball_comp_resolved = format(Sys.Date(), "%m-%d-%Y"))
View(new_responses)
str(new_responses$record_id)
import_data(token, data = new_responses)
#importing referee information for snowball responses
new_responses <- new_responses %>%
mutate(snowball_comp_resolved = format(Sys.Date(), "%m-%d-%Y"),
redcap_event_name = "orca_screener_arm_1")
#importing referee information for snowball responses
new_responses <- new_responses %>%
mutate(snowball_comp_resolved = format(Sys.Date(), "%m-%d-%Y"),
redcap_event_name = "orca_screener_arm_1") %>%
select(record_id, redcap_event_name, id_to_compensate, snowball_comp_resolved)
import_data(token, data = new_responses)
View(to_compensate)
manual_comps <- to_compensate %>%
filter(str_detect(record_id, '_'))
View(manual_comps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment")
write_csv(manual_comps, 'manual_compensations.csv', na="")
View(manual_comps)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/Snowball")
write_csv(manual_comps, paste0('manual_compensations_', Sys.Date(), '.csv'), na="")
#Pulling New Snowball Compensations
library(tidyverse)
library(OrcaData2)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/Snowball")
token <- "950056F36783568FBA0900EFAE8AA4A4"
snowball_list <- get_new_snowball_responses(token)
new_responses <- snowball_list$snowball_responses
to_compensate <- snowball_list$ids_to_compensate
View(to_compensate)
View(new_responses)
#importing prenatal screener pending compensations
to_compensate_prenatal <- to_compensate %>%
filter(grepl("^\\d+$", record_id)) %>%
select(record_id, redcap_event_name, prenatal_snowball_number)
new_responses <- new_responses %>%
mutate(snowball_comp_resolved = format(Sys.Date(), "%m-%d-%Y"),
redcap_event_name = "orca_screener_arm_1") %>%
select(record_id, redcap_event_name, id_to_compensate, snowball_comp_resolved)
import_data(token, data = new_responses)
snowball_list <- get_new_snowball_responses(token)
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
filter(is.na(snowball_comp_resolved)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
get_new_snowball_responses <- function(token, min_date_time = "2022-01-01 00:00:00") {
library(dplyr)
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
filter(is.na(snowball_comp_resolved)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
#performing manual checks
for (x in 1:nrow(snowball)) {
if (snowball$id_to_compensate[x] == 'manually check' | snowball$id_to_compensate[x] == 'cannot find id') {
cat("Find the screener record ID for the following participant:\n",
paste0("Name: ", snowball$rec_snowball_name[x], "\n"),
paste0("Email: ", snowball$rec_snowball_email[x], "\n"),
"\n",
"If they are not an ORCA particiapnt (e.g. Natalie Brito), enter 0\n",
"If they are a participant from orca 1.0, enter 1.0_id (e.g. 1.0_067)")
response <- readline(prompt = "Enter screener record id: ")
snowball$id_to_compensate[x] <- response
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
#creating dataframe of ids to compensate
ids_to_compensate <- data.frame(table(snowball$id_to_compensate))
ids_to_compensate <- ids_to_compensate %>%
filter(Var1 != '0') %>%
rename(record_id = Var1, n_new_referrals = Freq) %>%
mutate(comp_amount = ifelse(n_new_referrals <= 5, n_new_referrals*10, 50))
ids_to_compensate$record_id <- as.character(ids_to_compensate$record_id)
ids_to_compensate <- ids_to_compensate %>%
left_join(existing_snowball_comps, by="record_id") %>%
filter(is.na(maxed_out) | maxed_out == 0)
ids_to_compensate <- ids_to_compensate %>%
mutate(prenatal_snowball_number = ifelse(!is.na(prenatal_snowball_number), prenatal_snowball_number + n_new_referrals, n_new_referrals),
redcap_event_name = "prenatal_surveys_arm_1")
return(list(snowball_responses = snowball, ids_to_compensate = ids_to_compensate))
} else {
print("No new snowball responses!")
}
}
snowball_list <- get_new_snowball_responses(token)
cat("/n")
cat("\n")
cat("\n", "No new snowball responses!")
get_new_snowball_responses <- function(token, min_date_time = "2022-01-01 00:00:00") {
library(dplyr)
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
filter(is.na(snowball_comp_resolved)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
#performing manual checks
for (x in 1:nrow(snowball)) {
if (snowball$id_to_compensate[x] == 'manually check' | snowball$id_to_compensate[x] == 'cannot find id') {
cat("Find the screener record ID for the following participant:\n",
paste0("Name: ", snowball$rec_snowball_name[x], "\n"),
paste0("Email: ", snowball$rec_snowball_email[x], "\n"),
"\n",
"If they are not an ORCA particiapnt (e.g. Natalie Brito), enter 0\n",
"If they are a participant from orca 1.0, enter 1.0_id (e.g. 1.0_067)")
response <- readline(prompt = "Enter screener record id: ")
snowball$id_to_compensate[x] <- response
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
#creating dataframe of ids to compensate
ids_to_compensate <- data.frame(table(snowball$id_to_compensate))
ids_to_compensate <- ids_to_compensate %>%
filter(Var1 != '0') %>%
rename(record_id = Var1, n_new_referrals = Freq) %>%
mutate(comp_amount = ifelse(n_new_referrals <= 5, n_new_referrals*10, 50))
ids_to_compensate$record_id <- as.character(ids_to_compensate$record_id)
ids_to_compensate <- ids_to_compensate %>%
left_join(existing_snowball_comps, by="record_id") %>%
filter(is.na(maxed_out) | maxed_out == 0)
ids_to_compensate <- ids_to_compensate %>%
mutate(prenatal_snowball_number = ifelse(!is.na(prenatal_snowball_number), prenatal_snowball_number + n_new_referrals, n_new_referrals),
redcap_event_name = "prenatal_surveys_arm_1")
return(list(snowball_responses = snowball, ids_to_compensate = ids_to_compensate))
} else {
cat("\n", "No new snowball responses!")
}
}
snowball_list <- get_new_snowball_responses(token)
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
View(existing_snowball_comps)
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total, prenatal_snowball_pending) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
View(existing_snowball_comps)
View(snowball)
get_all_snowball_responses(token, min_date_time = "2022-01-01 00:00:00") {
get_all_snowball_responses(token, min_date_time = "2022-01-01 00:00:00") {
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
}
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total, prenatal_snowball_pending) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
return(list(snowball_responses = snowball, ids_who_referred = existing_snowball_comps))
get_all_snowball_responses(token, min_date_time = "2022-01-01 00:00:00") {
get_all_snowball_responses <- function(token, min_date_time = "2022-01-01 00:00:00") {
snowball <- get_orca_data(token, form = "orca_screener_survey")
min_date_time <- as.POSIXct(min_date_time, format = "%Y-%m-%d %H:%M:%S")
snowball <- snowball %>%
filter(orca_screener_survey_timestamp >= min_date_time) %>%
filter(rec_source == 2 & !is.na(rec_snowball_email) | !is.na(rec_snowball_name)) %>%
select(record_id, orca_screener_survey_timestamp, rec_source, rec_snowball_name, rec_snowball_email, id_to_compensate, snowball_comp_resolved)
contact <- get_screener_contact_info(token)
contact <- contact %>%
mutate(full_name = paste(rec_caregiver_name, rec_caregiver_name_last))
if (nrow(snowball) >= 1) {
for (x in 1:nrow(snowball)) {
if (!is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, rec_caregiver_email == snowball$rec_snowball_email[x])
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else if (!is.na(snowball$rec_snowball_name[x]) & is.na(snowball$rec_snowball_email[x])) {
temp <- filter(contact, tolower(full_name) == tolower(snowball$rec_snowball_name[x]))
id <- ifelse(nrow(temp) >= 1, as.character(temp$record_id[1]), 'cannot find id')
snowball[x, 'id_to_compensate'] <- id
} else {
snowball[x, 'id_to_compensate'] <- 'manually check'
}
}
}
existing_snowball_comps <- get_orca_data(token, form= "prenatal_compensation", form_complete = F)
existing_snowball_comps <- existing_snowball_comps %>%
filter(!is.na(prenatal_snowball_number)) %>%
select(record_id, prenatal_snowball_number, prenatal_snowball_total, prenatal_snowball_pending) %>%
mutate(maxed_out = ifelse(prenatal_snowball_total == 50, 1, 0))
existing_snowball_comps$record_id <- as.character(existing_snowball_comps$record_id)
return(list(snowball_responses = snowball, ids_who_referred = existing_snowball_comps))
}
x <- get_all_snowball_responses(token)
View(x)
setwd("/Users/amyhume/OrcaData2")
roxygen2::roxygenise()
remove.packages("OrcaData2")
devtools::install_github("amyhume/OrcaData2")
