table(srq$redcap_event_name)
View(srq)
colnames(srq)
srq$srq_sociability_wanting <- rowSums(srq[, c('srq5', 'srq11', 'srq17', 'srq19', 'srq29')], na.rm=T)
srq$srq_sociability_wanting <- rowSums(srq[, c('srq5', 'srq11', 'srq17', 'srq19', 'srq29')], na.rm=T)
srq$srq_sociability_liking <- rowSums(srq[, c('srq6', 'srq12','srq18', 'srq20', 'srq30')], na.rm=T)
srq$srq_admiration_wanting <- rowSums(srq[, c('srq1', 'srq3', 'srq13', 'srq21', 'srq25')], na.rm=T)
srq$srq_admiration_liking <- rowSums(srq[, c('srq2', 'srq4', 'srq14', 'srq22', 'srq26')], na.rm=T)
srq$srq_prosocial_wanting <- rowSums(srq[, c('srq7', 'srq9', 'srq15', 'srq23', 'srq27')], na.rm=T)
srq$srq_prosocial_liking <- rowSums(srq[, c('srq8', 'srq10', 'srq16', 'srq24', 'srq28')], na.rm=T)
srq <- get_data(token, form='social_reward_questionnaire_srqec')
srq$srq_sociability_wanting <- rowSums(srq[, c('srq5', 'srq11', 'srq17', 'srq19', 'srq29')], na.rm=T)
srq$srq_sociability_liking <- rowSums(srq[, c('srq6', 'srq12','srq18', 'srq20', 'srq30')], na.rm=T)
srq$srq_admiration_wanting <- rowSums(srq[, c('srq1', 'srq3', 'srq13', 'srq21', 'srq25')], na.rm=T)
srq$srq_admiration_liking <- rowSums(srq[, c('srq2', 'srq4', 'srq14', 'srq22', 'srq26')], na.rm=T)
srq$srq_prosocial_wanting <- rowSums(srq[, c('srq7', 'srq9', 'srq15', 'srq23', 'srq27')], na.rm=T)
srq$srq_prosocial_liking <- rowSums(srq[, c('srq8', 'srq10', 'srq16', 'srq24', 'srq28')], na.rm=T)
srq <- srq %>%
select(record_id, social_reward_questionnaire_srqec_timestamp, srq_sociability_wanting:srq_prosocial_liking)
srq <- get_data(token, form='social_reward_questionnaire_srqec')
#Social reward questionnaire
get_srq <- function(token, all_items=F) {
library(dplyr)
srq <- get_data(token, form='social_reward_questionnaire_srqec')
srq$srq_sociability_wanting <- rowSums(srq[, c('srq5', 'srq11', 'srq17', 'srq19', 'srq29')], na.rm=T)
srq$srq_sociability_liking <- rowSums(srq[, c('srq6', 'srq12','srq18', 'srq20', 'srq30')], na.rm=T)
srq$srq_admiration_wanting <- rowSums(srq[, c('srq1', 'srq3', 'srq13', 'srq21', 'srq25')], na.rm=T)
srq$srq_admiration_liking <- rowSums(srq[, c('srq2', 'srq4', 'srq14', 'srq22', 'srq26')], na.rm=T)
srq$srq_prosocial_wanting <- rowSums(srq[, c('srq7', 'srq9', 'srq15', 'srq23', 'srq27')], na.rm=T)
srq$srq_prosocial_liking <- rowSums(srq[, c('srq8', 'srq10', 'srq16', 'srq24', 'srq28')], na.rm=T)
if (!all_items) {
srq <- srq %>%
select(record_id, social_reward_questionnaire_srqec_timestamp, srq_sociability_wanting:srq_prosocial_liking)
} else {
srq <- srq %>%
select(-redcap_event_name:-redcap_survey_identifier, -social_reward_questionnaire_srqec_complete)
}
return(srq)
}
x <- get_srq(token)
View(x)
x <- get_srq(token, all_items = T)
res <- get_data(token, form='resilience24')
View(res)
timepoint = 'infant_9months_arm_1'
res <- filter(res, timepoint == timepoint)
View(res)
res <- filter(res, timepoint == timepoint)
timepoint = 'infant_9months_arm_1'
res <- filter(res, redcap_event_name == timepoint)
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/MICE/Recruitment")
token <- '950056F36783568FBA0900EFAE8AA4A4'
pch <- 'B17171C96E09FE75231D605CBCE4B249'
threshold = as.POSIXct("2025-04-23 08:15:01", format="%Y-%m-%d %H:%M:%S")
#getting peach ids
pch_id <- get_orca_field(pch, field='screener_record_id')
pch_id <- pch_id %>%
filter(str_detect(record_id, 'pch')) %>%
select(-redcap_event_name) %>%
rename(pch_id = record_id, record_id = screener_record_id)
#reading in invite logs
mice = read.csv('mice.csv', na.strings="")
mice_peach = read.csv('mice_peach.csv', na.strings="")
mice <- mice %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
mice_peach <- mice_peach %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
invited <- full_join(mice, mice_peach)
invited <- invited %>%
distinct(record_id, .keep_all=T)
#PULLING EXPECTED MICE 4m INVITE LOG
dobs <- get_prenatal_dob(token)
mice_info <- get_orca_data(token, form='tracking_info', form_complete = F)
mice_info <- mice_info %>%
filter(!is.na(mice_id) & !is.na(mice_returned)) %>%
select(record_id, mice_id, mice_returned)
mice_info <- mice_info %>%
left_join(dobs, by='record_id')
mice_info$expected_invite_date = mice_info$child_dob_final + 107
mice_info <- mice_info %>%
left_join(invited, by='record_id')
#FIltering to only include IDs that have already been invited
future_invites <- mice_info %>%
filter(expected_invite_date > Sys.Date())
mice_info <- mice_info %>%
filter(expected_invite_date <= Sys.Date())
#pulling screener info
screener <- get_orca_screener(token)
screener <- screener %>%
select(record_id, caregiver_name, language, email, phone, zipcode, timezone)
mice_info$record_id <- as.character(mice_info$record_id)
screener$record_id <- as.character(screener$record_id)
mice_info <- mice_info %>%
left_join(screener, by='record_id') %>%
left_join(pch_id, by="record_id")
#ORGANIZING FINAL OUTPUT
mice_info$invite_date <- as.POSIXct(mice_info$invite_date, format="%m-%d-%Y %H:%M")
mice_info <- mice_info %>%
filter(invite_date >= threshold) %>%
mutate(missed = ifelse(is.na(invite_date), 1, 0)) %>%
select(record_id, mice_id, pch_id, expected_invite_date, invite_date, language, caregiver_name, email, phone, child_dob_final, dob_confirmed, zipcode, timezone, missed) %>%
arrange(expected_invite_date)
View(future_invites)
future_invites$month <- month(future_invites$expected_invite_date)
future_invites$month <- month(future_invites$expected_invite_date, abb=False)
future_invites$month <- month(future_invites$expected_invite_date, abb=F)
future_invites$month <- month(future_invites$expected_invite_date,label=T)
table(future_invites$month)
reversed <- c('resilience_q12', 'resilience_q14', 'resilience_q16', 'resilience_q18', 'resilience_q20', 'resilience_q21',
'resilience_q24', 'resilience_q28', 'resilience_q29')
reversed <- c('resilience_q12', 'resilience_q14', 'resilience_q16', 'resilience_q18', 'resilience_q20', 'resilience_q21',
'resilience_q24', 'resilience_q28', 'resilience_q29')
res[reversed] <- lapply(res[reversed], function(x) 4 - x)
res$res_structured_style <- rowMeans(res[, c('resilience_q11', 'resilience_q12', 'resilience_q13', 'resilience_q14')], na.rm=T)
res$res_social_competence <- rowMeans(res[, c('resilience_q15', 'resilience_q16', 'resilience_q17', 'resilience_q18',
'resilience_q19', 'resilience_q20')], na.rm=T)
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')], na.rm=T)
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')])
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')], na.rm=T)
res <- get_data(token, form='resilience24')
res <- filter(res, redcap_event_name == timepoint)
res <- get_data(token, form='resilience24')
res <- filter(res, redcap_event_name == timepoint)
token <- 'D4DF5D2839A15994FCEC02E51B81C609'
res <- get_data(token, form='resilience24')
res <- filter(res, redcap_event_name == timepoint)
res <- filter(res, redcap_event_name == timepoint)
cd_risc10 <- c('resilience_q01', 'resilience_q02', 'resilience_q03', 'resilience_q04', 'resilience_q05', 'resilience_q06',
'resilience_q07', 'resilience_q08', 'resilience_q09', 'resilience_q10')
reversed <- c('resilience_q12', 'resilience_q14', 'resilience_q16', 'resilience_q18', 'resilience_q20', 'resilience_q21',
'resilience_q24', 'resilience_q28', 'resilience_q29')
res[reversed] <- lapply(res[reversed], function(x) 4 - x)
res$res_structured_style <- rowMeans(res[, c('resilience_q11', 'resilience_q12', 'resilience_q13', 'resilience_q14')], na.rm=T)
res$res_social_competence <- rowMeans(res[, c('resilience_q15', 'resilience_q16', 'resilience_q17', 'resilience_q18',
'resilience_q19', 'resilience_q20')], na.rm=T)
res$res_planned_future <- rowMeans(res[, c('resilience_q21', 'resilience_q22', 'resilience_q23', 'resilience_q24', 'resilience_q27')], na.rm=T)
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')], na.rm=T)
#CD RISC SCORES
res$res_cd_risc10 <- rowMeans(res[, cd_risc10], na.rm=T)
res <- res %>%
select(record_id, resilience24_timestamp, res_cd_risc10, res_structured_style:res_perception_self)
res <- get_data(token, form='resilience24')
res <- filter(res, redcap_event_name == timepoint)
cd_risc10 <- c('resilience_q01', 'resilience_q02', 'resilience_q03', 'resilience_q04', 'resilience_q05', 'resilience_q06',
'resilience_q07', 'resilience_q08', 'resilience_q09', 'resilience_q10')
reversed <- c('resilience_q12', 'resilience_q14', 'resilience_q16', 'resilience_q18', 'resilience_q20', 'resilience_q21',
'resilience_q24', 'resilience_q28', 'resilience_q29')
res[reversed] <- lapply(res[reversed], function(x) 4 - x)
res$res_structured_style <- rowMeans(res[, c('resilience_q11', 'resilience_q12', 'resilience_q13', 'resilience_q14')], na.rm=T)
res$res_social_competence <- rowMeans(res[, c('resilience_q15', 'resilience_q16', 'resilience_q17', 'resilience_q18',
'resilience_q19', 'resilience_q20')], na.rm=T)
res$res_planned_future <- rowMeans(res[, c('resilience_q21', 'resilience_q22', 'resilience_q23', 'resilience_q24', 'resilience_q27')], na.rm=T)
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')], na.rm=T)
#CD RISC SCORES
res$res_cd_risc10 <- rowMeans(res[, cd_risc10], na.rm=T)
res <- res %>%
select(-redcap_event_name:-redcap_survey_identifier, -resilience24_complete)
get_resilience <- function(token, timepoint = 'infant_9months_arm_1', all_items=F) {
library(dplyr)
res <- get_data(token, form='resilience24')
res <- filter(res, redcap_event_name == timepoint)
cd_risc10 <- c('resilience_q01', 'resilience_q02', 'resilience_q03', 'resilience_q04', 'resilience_q05', 'resilience_q06',
'resilience_q07', 'resilience_q08', 'resilience_q09', 'resilience_q10')
reversed <- c('resilience_q12', 'resilience_q14', 'resilience_q16', 'resilience_q18', 'resilience_q20', 'resilience_q21',
'resilience_q24', 'resilience_q28', 'resilience_q29')
res[reversed] <- lapply(res[reversed], function(x) 4 - x)
res$res_structured_style <- rowMeans(res[, c('resilience_q11', 'resilience_q12', 'resilience_q13', 'resilience_q14')], na.rm=T)
res$res_social_competence <- rowMeans(res[, c('resilience_q15', 'resilience_q16', 'resilience_q17', 'resilience_q18',
'resilience_q19', 'resilience_q20')], na.rm=T)
res$res_planned_future <- rowMeans(res[, c('resilience_q21', 'resilience_q22', 'resilience_q23', 'resilience_q24', 'resilience_q27')], na.rm=T)
res$res_perception_self <- rowMeans(res[, c('resilience_q25', 'resilience_q26', 'resilience_q28', 'resilience_q29', 'resilience_q30')], na.rm=T)
#CD RISC SCORES
res$res_cd_risc10 <- rowMeans(res[, cd_risc10], na.rm=T)
if (!all_items) {
res <- res %>%
select(record_id, resilience24_timestamp, res_cd_risc10, res_structured_style:res_perception_self)
} else {
res <- res %>%
select(-redcap_event_name:-redcap_survey_identifier, -resilience24_complete)
}
return(res)
}
x <- get_resilience(token)
View(x)
x <- get_resilience(token, all_items = T)
library(OrcaData2)
library(tidyverse)
scr_token <- '950056F36783568FBA0900EFAE8AA4A4'
pch_token <- 'B17171C96E09FE75231D605CBCE4B249'
#pulling non responders
nr <- get_orca_field(scr_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(scr_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(scr_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(scr_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(scr_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(pch_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
View(import_file)
import_file <- import_file %>%
filter(screener_record_id == "4135") ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
import_data(pch_token, import_file)
import_file2 <- import_file %>%
select(screener_record_id) %>%
mutate(redcap_event_name = 'orca_screener_arm_1') %>%
mutate(pch_enroll_complete = Sys.Date()) %>%
rename(record_id = screener_record_id)
import_data(scr_token, import_file2)
library(OrcaData2)
library(tidyverse)
token = '25120FD84FFDA3B220617BDF23B680CD'
initials = 'AH'
setwd("~/Documents/GitHub/owlet-firebase-processing/Subjects/ORCA_Subjects/12m")
full_log <- read.csv('owlet_processing_statuses.csv', na.strings="")
View(full_log)
library(OrcaData2)
library(tidyverse)
token <- '25120FD84FFDA3B220617BDF23B680CD'
setwd('/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Data/12 Months/OWLET Data/Log Books')
log <- read.csv('Incoming Data Log 12m.csv', na.strings="")
import_file <- log %>%
filter(is.na(movesense_time_uploaded)) %>%
mutate(redcap_event_name = 'orca_12month_arm_1') %>%
select(record_id, redcap_event_name, cg_movesense_on_12m:child_light_visible_12m)
import_file$record_id <- as.character(import_file$record_id)
View(import_file2)
View(import_file)
import_data(token, import_file)
for (row in 1:nrow(import_file)) {
id = import_file$record_id[row]
log[log$record_id == id,]$movesense_time_uploaded = 1
}
write_csv(log, 'Incoming Data Log 12m.csv', na="")
library(OrcaData2)
library(tidyverse)
token = '25120FD84FFDA3B220617BDF23B680CD'
initials = 'AH'
setwd("~/Documents/GitHub/owlet-firebase-processing/Subjects/ORCA_Subjects/8m")
full_log <- read.csv('owlet_processing_statuses.csv', na.strings="")
log <- full_log %>%
filter(is.na(redcap_updated))
full_log <- read.csv('owlet_processing_statuses.csv', na.strings="")
log <- full_log %>%
filter(redcap_updated == 0)
View(log)
View(log)
log$record_id <- as.character(log$record_id)
ids <- unique(log$record_id)
import_file = data.frame(record_id = as.character(),redcap_event_name = as.character(),owlet_date_12m = as.character(), owlet_ra_12m = as.character(),
download_richards_12m = as.numeric(),download_vpc_12m = as.numeric(),download_srt_12m = as.numeric(),
download_cecile_12m = as.numeric(),download_rm_12m = as.numeric(),download_pa_12m = as.numeric(), download_gap_12m = as.numeric(),
owlet_richards_12m = as.numeric(),owlet_vpc_12m = as.numeric(),owlet_srt_12m = as.numeric(),owlet_cecile_12m = as.numeric(),
owlet_rm_12m = as.numeric(), owlet_pa_12m = as.numeric(), owlet_gap_12m = as.numeric())
import_file = data.frame(record_id = as.character(),redcap_event_name = as.character(),owlet_date_8m = as.character(), owlet_ra_8m = as.character(),
download_richards_8m = as.numeric(),download_vpc_8m = as.numeric(),download_srt_8m = as.numeric(),
download_cecile_8m = as.numeric(),download_rm_8m = as.numeric(),download_pa_8m = as.numeric(), download_social_8m = as.numeric(),
owlet_richards_8m = as.numeric(),owlet_vpc_8m = as.numeric(),owlet_srt_8m = as.numeric(),owlet_cecile_8m = as.numeric(),
owlet_rm_8m = as.numeric(), owlet_pa_8m = as.numeric(), owlet_social_8m = as.numeric())
for (id in ids) {
log_id = log %>%
filter(record_id == id)
temp_data = data.frame(record_id = id,
redcap_event_name = 'orca_8month_arm_1', owlet_ra_8m = initials,
owlet_date_8m = log_id$date[1],
download_richards_8m = subset(log_id, task == '8m_richards')$downloaded,
download_vpc_8m = subset(log_id, task == '8m_vpc')$downloaded,
download_srt_8m = subset(log_id, task == '8m_srt')$downloaded,
download_cecile_8m = subset(log_id, task == '8m_cecile')$downloaded,
download_rm_8m = subset(log_id, task == '8m_rm')$downloaded,
download_pa_8m = subset(log_id, task == '8m_rm')$downloaded,
download_social_8m = subset(log_id, task == '8m_social')$downloaded,
owlet_richards_8m = subset(log_id, task == '8m_richards')$preprocessed,
owlet_vpc_8m = subset(log_id, task == '8m_vpc')$preprocessed,
owlet_srt_8m = subset(log_id, task == '8m_srt')$preprocessed,
owlet_cecile_8m = subset(log_id, task == '8m_cecile')$preprocessed,
owlet_rm_8m = subset(log_id, task == '8m_rm')$preprocessed,
owlet_pa_8m = subset(log_id, task == '8m_pa')$preprocessed,
owlet_social_8m = subset(log_id, task == '8m_social')$preprocessed)
import_file = full_join(import_file, temp_data)
}
View(import_file)
full_log <- read.csv('owlet_processing_statuses.csv', na.strings="")
log <- full_log %>%
filter(redcap_updated == 0 | is.na(redcap_updated))
log$record_id <- as.character(log$record_id)
ids <- unique(log$record_id)
import_file = data.frame(record_id = as.character(),redcap_event_name = as.character(),owlet_date_8m = as.character(), owlet_ra_8m = as.character(),
download_richards_8m = as.numeric(),download_vpc_8m = as.numeric(),download_srt_8m = as.numeric(),
download_cecile_8m = as.numeric(),download_rm_8m = as.numeric(),download_pa_8m = as.numeric(), download_social_8m = as.numeric(),
owlet_richards_8m = as.numeric(),owlet_vpc_8m = as.numeric(),owlet_srt_8m = as.numeric(),owlet_cecile_8m = as.numeric(),
owlet_rm_8m = as.numeric(), owlet_pa_8m = as.numeric(), owlet_social_8m = as.numeric())
for (id in ids) {
log_id = log %>%
filter(record_id == id)
temp_data = data.frame(record_id = id,
redcap_event_name = 'orca_8month_arm_1', owlet_ra_8m = initials,
owlet_date_8m = log_id$date[1],
download_richards_8m = subset(log_id, task == '8m_richards')$downloaded,
download_vpc_8m = subset(log_id, task == '8m_vpc')$downloaded,
download_srt_8m = subset(log_id, task == '8m_srt')$downloaded,
download_cecile_8m = subset(log_id, task == '8m_cecile')$downloaded,
download_rm_8m = subset(log_id, task == '8m_rm')$downloaded,
download_pa_8m = subset(log_id, task == '8m_rm')$downloaded,
download_social_8m = subset(log_id, task == '8m_social')$downloaded,
owlet_richards_8m = subset(log_id, task == '8m_richards')$preprocessed,
owlet_vpc_8m = subset(log_id, task == '8m_vpc')$preprocessed,
owlet_srt_8m = subset(log_id, task == '8m_srt')$preprocessed,
owlet_cecile_8m = subset(log_id, task == '8m_cecile')$preprocessed,
owlet_rm_8m = subset(log_id, task == '8m_rm')$preprocessed,
owlet_pa_8m = subset(log_id, task == '8m_pa')$preprocessed,
owlet_social_8m = subset(log_id, task == '8m_social')$preprocessed)
import_file = full_join(import_file, temp_data)
}
#import to redcap
import_data(token, import_file)
full_log <- full_log %>%
mutate(redcap_updated = ifelse(is.na(redcap_updated) | redcap_updated == 0, 1, redcap_updated))
write_csv(full_log, 'owlet_processing_statuses.csv', na="")
token <- '25120FD84FFDA3B220617BDF23B680CD'
library(OrcaData2)
x <- get_orca_field(token, field='check_owlet_ran')
View(x)
library(OrcaData2)
library(tidyverse)
token <- '25120FD84FFDA3B220617BDF23B680CD'
setwd('/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Data/8 Months/OWLET_Data/Log Books')
log <- read.csv('Incoming Data Log 8m.csv', na.strings="")
import_file <- log %>%
filter(is.na(movesense_time_uploaded)) %>%
mutate(redcap_event_name = 'orca_8month_arm_1') %>%
select(record_id, redcap_event_name, cg_movesense_on_8m:child_light_visible_8m)
import_file$record_id <- as.character(import_file$record_id)
import_data(token, import_file)
for (row in 1:nrow(import_file)) {
id = import_file$record_id[row]
log[log$record_id == id,]$movesense_time_uploaded = 1
}
write_csv(log, 'Incoming Data Log 8m.csv', na="")
library(tidyverse)
orca2 <- get_orca_cohort(token)
View(orca2)
sri <- get_orca_field(token, field='screener_record_id') %>%
select(-redcap_event_name)
View(sri)
library(OrcaData2)
library(tidyverse)
scr_token <- '950056F36783568FBA0900EFAE8AA4A4'
pch_token <- 'B17171C96E09FE75231D605CBCE4B249'
#pulling non responders
nr <- get_orca_field(scr_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(scr_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(scr_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(scr_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(scr_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(pch_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
View(import_file)
import_file <- import_file %>%
filter(screener_record_id == "4142") ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
import_data(pch_token, import_file)
import_file2 <- import_file %>%
select(screener_record_id) %>%
mutate(redcap_event_name = 'orca_screener_arm_1') %>%
mutate(pch_enroll_complete = Sys.Date()) %>%
rename(record_id = screener_record_id)
import_data(scr_token, import_file2)
library(tidyverse)
token <- '950056F36783568FBA0900EFAE8AA4A4'
orca_token <- '25120FD84FFDA3B220617BDF23B680CD'
#importing mice participant to orca
mice_record_id = 'mc_018'
import_mice_to_orca(token, orca_token, mice_record_id = mice_record_id)
library(OrcaData2)
library(tidyverse)
token <- '950056F36783568FBA0900EFAE8AA4A4'
orca_token <- '25120FD84FFDA3B220617BDF23B680CD'
#importing mice participant to orca
mice_record_id = 'mc_018'
import_mice_to_orca <- function(scr_token, orca_token, mice_record_id) {
mice_ids <- get_orca_field(token, field='mice_id')
mice_ids <- mice_ids %>%
filter(mice_id == mice_record_id)
sri = mice_ids$record_id[1]
prenatal_surveys = get_orca_field(token, field='prams_complete') %>%
filter(record_id == sri)
pch_complete = get_orca_field(token, field='pch_enroll_complete') %>%
filter(record_id == sri)
blood_returned = get_orca_field(token, field='mice_returned') %>%
filter(record_id == sri)
mc_consent <- get_orca_field(token, field='mice_consent_date') %>%
filter(record_id == sri)
prenatal <- ifelse(nrow(prenatal_surveys) == 1 & prenatal_surveys$prams_complete[1] == 2, 1, 0)
blood <- as.Date(ifelse(nrow(blood_returned) == 1, blood_returned$mice_returned[1], NA))
blood_valid <- ifelse(as.Date(mc_consent$mice_consent_date[1]) >= as.Date('2024-11-01'), 1, 0)
import_file <- data.frame(record_id = mice_record_id,
redcap_event_name = 'mice_participant_m_arm_4',
screener_record_id = sri,
prenatal_yesno = prenatal,
mc_blood_date = blood,
mc_blood_valid = blood_valid)
if (nrow(pch_complete) == 1) {
peach_pp <- get_orca_field(token='B17171C96E09FE75231D605CBCE4B249', field='screener_record_id')
peach_pp <- peach_pp %>%
filter(screener_record_id == sri)
pch_id = peach_pp$record_id[1]
import_file$pch_id = pch_id
}
import_data(orca_token, import_file)
}
setwd("~/Documents/GitHub/OrcaData2")
roxygen2::roxygenise()
remove.packages('OrcaData2')
devtools::install_github('amyhume/OrcaData2')
