rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
ecg8 <- ecg8 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg8 <- ecg8 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..7) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
View(ecg8)
dyadic_ecg8 <- data.frame(record_id = unique(ecg8$record_id), available = NA)
for (id in unique(ecg8$record_id)) {
temp <- ecg8 %>%
filter(record_id == id)
cg_available = ifelse(temp$available[1] == 1 & temp$freeplay_available[1] == 1 & is.na(temp$unusable[1]), 1, 0)
child_available = ifelse(temp$available[2] == 1 & temp$freeplay_available[2] == 1 & is.na(temp$unusable[2]), 1, 0)
dyad_available = ifelse(cg_available == 1 & child_available == 1, 1, 0)
dyadic_ecg8$available[dyadic_ecg8$record_id == id] <- dyad_available
}
View(dyadic_ecg8)
colnames(ecg12) <- as.character(ecg12[3, ])
colnames(ecg12) <- make.names(colnames(ecg12), unique = TRUE)
ecg12 <- ecg12[-c(1:3), ]
View(ecg12)
ecg12 <- ecg12 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg12 <- ecg12 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..7) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
ecg12 <- read.csv('ecg12.csv', na.strings="", header=F)
#12 MONTH
colnames(ecg12) <- as.character(ecg12[3, ])
colnames(ecg12) <- make.names(colnames(ecg12), unique = TRUE)
ecg12 <- ecg12[-c(1:3), ]
ecg12 <- ecg12 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg12 <- ecg12 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..7) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
dyadic_ecg12 <- data.frame(record_id = unique(ecg12$record_id), available = NA)
for (id in unique(ecg12$record_id)) {
temp <- ecg12 %>%
filter(record_id == id)
cg_available = ifelse(temp$available[1] == 1 & temp$freeplay_available[1] == 1 & is.na(temp$unusable[1]), 1, 0)
child_available = ifelse(temp$available[2] == 1 & temp$freeplay_available[2] == 1 & is.na(temp$unusable[2]), 1, 0)
dyad_available = ifelse(cg_available == 1 & child_available == 1, 1, 0)
dyadic_ecg12$available[dyadic_ecg12$record_id == id] <- dyad_available
}
View(dyadic_ecg12)
View(dyadic_ecg4)
ecg4 <- read.csv('ecg4.csv', na.strings="", header=F)
ecg8 <- read.csv('ecg8.csv', na.strings="", header=F)
ecg12 <- read.csv('ecg12.csv', na.strings="", header=F)
#4 MONTH
colnames(ecg4) <- as.character(ecg4[3, ])
colnames(ecg4) <- make.names(colnames(ecg4), unique = TRUE)
ecg4 <- ecg4[-c(1:3), ]
ecg4 <- ecg4 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg4 <- ecg4 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..5) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..5)
dyadic_ecg4 <- data.frame(record_id = unique(ecg4$record_id), available_4m = NA)
for (id in unique(ecg4$record_id)) {
temp <- ecg4 %>%
filter(record_id == id)
cg_available = ifelse(temp$available[1] == 1 & temp$freeplay_available[1] == 1 & is.na(temp$unusable[1]), 1, 0)
child_available = ifelse(temp$available[2] == 1 & temp$freeplay_available[2] == 1 & is.na(temp$unusable[2]), 1, 0)
dyad_available = ifelse(cg_available == 1 & child_available == 1, 1, 0)
dyadic_ecg4$available_4m[dyadic_ecg4$record_id == id] <- dyad_available
}
#8 MONTH
colnames(ecg8) <- as.character(ecg8[3, ])
colnames(ecg8) <- make.names(colnames(ecg8), unique = TRUE)
ecg8 <- ecg8[-c(1:3), ]
ecg8 <- ecg8 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg8 <- ecg8 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..7) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
dyadic_ecg8 <- data.frame(record_id = unique(ecg8$record_id), available_8m = NA)
for (id in unique(ecg8$record_id)) {
temp <- ecg8 %>%
filter(record_id == id)
cg_available = ifelse(temp$available[1] == 1 & temp$freeplay_available[1] == 1 & is.na(temp$unusable[1]), 1, 0)
child_available = ifelse(temp$available[2] == 1 & temp$freeplay_available[2] == 1 & is.na(temp$unusable[2]), 1, 0)
dyad_available = ifelse(cg_available == 1 & child_available == 1, 1, 0)
dyadic_ecg8$available_8m[dyadic_ecg8$record_id == id] <- dyad_available
}
colnames(ecg12) <- as.character(ecg12[3, ])
colnames(ecg12) <- make.names(colnames(ecg12), unique = TRUE)
ecg12 <- ecg12[-c(1:3), ]
ecg12 <- ecg12 %>%
rename(record_id = Record.ID) %>%
fill(record_id, .direction = "down")
ecg12 <- ecg12 %>%
select(record_id, Child.CG, Available., Freeplay, Unusable..1..7) %>%
rename(who = Child.CG, available= Available., freeplay_available = Freeplay, unusable = Unusable..1..7)
dyadic_ecg12 <- data.frame(record_id = unique(ecg12$record_id), available_12m = NA)
for (id in unique(ecg12$record_id)) {
temp <- ecg12 %>%
filter(record_id == id)
cg_available = ifelse(temp$available[1] == 1 & temp$freeplay_available[1] == 1 & is.na(temp$unusable[1]), 1, 0)
child_available = ifelse(temp$available[2] == 1 & temp$freeplay_available[2] == 1 & is.na(temp$unusable[2]), 1, 0)
dyad_available = ifelse(cg_available == 1 & child_available == 1, 1, 0)
dyadic_ecg12$available_12m[dyadic_ecg12$record_id == id] <- dyad_available
}
dyadic_ecg <- dyadic_ecg4 %>%
full_join(dyadic_ecg8) %>%
full_join(dyadic_ecg12)
View(dyadic_ecg)
dyadic_ecg$sum <- rowSums(dyadic_ecg[, c('available_4m', 'available_8m', 'available_12m')], na.rm=T)
dyadic_ecg <- dyadic_ecg %>%
filter(sum > 1)
View(dyadic_ecg)
library(OrcaData2)
library(tidyverse)
scr_token <- '950056F36783568FBA0900EFAE8AA4A4'
pch_token <- 'B17171C96E09FE75231D605CBCE4B249'
#pulling non responders
nr <- get_orca_field(scr_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(scr_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(scr_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(scr_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(scr_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(pch_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
View(import_file)
import_file <- impport_file %>%
filter(screener_record_id == "3298") ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
library(OrcaData2)
library(tidyverse)
scr_token <- '950056F36783568FBA0900EFAE8AA4A4'
pch_token <- 'B17171C96E09FE75231D605CBCE4B249'
#pulling non responders
nr <- get_orca_field(scr_token, field='pch_non_respond')
nr <- nr %>%
select(-redcap_event_name)
#pulling birth updates
dob <- get_orca_field(scr_token, field='child_dob_update')
dob <- dob %>%
select(record_id, child_dob_update)
timezone <- get_orca_field(scr_token, field='timezone')
timezone <- timezone %>%
select(-redcap_event_name)
#Pulling peach participant info forms from screener
pch_info <- get_orca_data(scr_token, form='peach_participant_information')
#Pulling peach consent info from screener (to catch people who have consented but not done participant info)
pch_consents <- get_orca_data(scr_token, form='peach_informed_consent_updated')
new_pch <- pch_consents %>%
filter(pch_consent_yesno_v2 == 1) %>%
select(record_id, consent_date_pch_v2) %>%
left_join(pch_info, by='record_id') %>%
left_join(timezone, by='record_id')
#checking incomplete IDs
incomplete_forms <- new_pch %>%
filter(!is.na(consent_date_pch_v2) & is.na(peach_participant_information_complete))
incomplete_forms <- incomplete_forms$record_id
if (length(incomplete_forms) > 0) {
cat('The following IDs have completed consent but not participant information. Please follow up\n',
incomplete_forms)
}
#getting relevant columns
new_pch <- new_pch %>%
filter(peach_participant_information_complete == 2) %>%
select(record_id, consent_date_pch_v2, prenatal_yesno:pm_survey_time) %>%
left_join(dob, by='record_id') %>%
left_join(nr, by='record_id')
new_pch <- new_pch %>%
filter(is.na(pch_non_respond) | pch_non_respond == 0)
#Pulling screener record ids from PEACH project - removing those from screener df who have already enrolled
pch_ids <- get_orca_field(pch_token, field='screener_record_id')
screener_ids <- unique(pch_ids$screener_record_id)
#existing pch_ids
pch_ids <- unique(pch_ids$record_id)
pch_ids <- pch_ids[str_detect(pch_ids, 'pch_')]
import_file <- new_pch %>%
rename(screener_record_id = record_id)
import_file <- import_file %>%
filter(!screener_record_id %in% screener_ids)
import_file <- impport_file %>%
filter(screener_record_id == "3298")
import_file <- import_file %>%
filter(screener_record_id == "3298") ## ADDED by AA to only include specific users
#assigning new ids!
import_file$record_id <- assign_ids(pch_ids, import_file$screener_record_id, prefix='pch_')
import_file <- import_file %>%
select(-consent_date_pch_v2, -pch_non_respond)
import_file <- import_file %>%
mutate(redcap_event_name = 'initial_data_arm_1')
import_file <- import_file %>%
filter(!str_detect(screener_record_id, 'test'))
import_file <- import_file %>%
rename(child_dob = child_dob_update)
import_data(pch_token, import_file)
import_file2 <- import_file %>%
select(screener_record_id) %>%
mutate(redcap_event_name = 'orca_screener_arm_1') %>%
mutate(pch_enroll_complete = Sys.Date()) %>%
rename(record_id = screener_record_id)
import_data(scr_token, import_file2)
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/8 Months")
token <- '25120FD84FFDA3B220617BDF23B680CD'
threshold = as.POSIXct("2025-03-03 07:06:01", format="%Y-%m-%d %H:%M:%S")
invites <- read.csv('invites.csv', na.strings="")
invites <- invites %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
demo <- get_orca_data(token, form='sociodemographic')
demo <- demo %>%
filter(redcap_event_name == 'orca_4month_arm_1') %>%
select(record_id, child_dob, zip_code)
eligible <- get_orca_field(token, field='longitudinal_yesno')
eligible <- eligible %>%
select(-redcap_event_name)
contact_info <- get_orca_data(token, form='participant_information')
contact_info <- contact_info %>%
filter(redcap_event_name == 'orca_participant_m_arm_1') %>%
select(record_id,cg_firstname, child_firstname, language, email, phone)
demo <- demo %>%
left_join(eligible, by='record_id') %>%
left_join(contact_info, by='record_id')
#ages & timezone
demo$current_age <- as.numeric(difftime(Sys.Date(), demo$child_dob, units="days"))
demo$timezone <- calculate_timezone(demo$zip_code)
demo <- demo %>%
filter(current_age >= 228 & current_age < 280 & longitudinal_yesno == 1)
invites$record_id <- as.character(invites$record_id)
invites <- invites %>%
full_join(demo, by='record_id')
invites$invite_date <- as.POSIXct(invites$invite_date, format="%m-%d-%Y %H:%M")
invites <- invites %>%
select(record_id, invite_date, language, cg_firstname, child_firstname, email, phone, child_dob, zip_code, timezone) %>%
filter(invite_date >= threshold) %>%
mutate(missed = NA)
invites <- invites %>%
mutate(language = case_when(language == 'en' ~ 'English', language == 'es' ~ 'Spanish'))
for (row in 1:nrow(invites)) {
if (is.na(invites$invite_date[row])) {
print(paste0("Invite has not been sent for record ", invites$record_id[row]))
invites$missed[row] <- 1
}
}
View(invites)
write_csv(invites, 'invites.csv', na="")
library(OrcaData2)
library(tidyverse)
setwd("/Volumes/ISLAND/Projects/ORCA/ORCA 2.0/Recruitment/12 Months")
token <- '25120FD84FFDA3B220617BDF23B680CD'
threshold = as.POSIXct("2025-02-28 02:42:01", format="%Y-%m-%d %H:%M:%S")
invites <- read.csv('invites.csv', na.strings="")
invites <- invites %>%
select(Record, X.Notification.send.time) %>%
rename(record_id = Record, invite_date = X.Notification.send.time)
#pulling demo form
demo <- get_orca_data(token, form='sociodemographic')
demo <- demo %>%
filter(redcap_event_name == 'orca_4month_arm_1') %>%
select(record_id, child_dob, zip_code)
#pulling longitudinal status/withdrawal info
eligible <- get_orca_field(token, field='longitudinal_yesno')
eligible <- eligible %>%
select(-redcap_event_name)
withdrawal_8m = get_orca_field(token, field='optout_yesno')
withdrawal_8m <- withdrawal_8m %>%
filter(optout_yesno == 1 & redcap_event_name == 'orca_8month_arm_1') %>%
select(-redcap_event_name)
#pulling contact info
contact_info <- get_orca_data(token, form='participant_information')
contact_info <- contact_info %>%
filter(redcap_event_name == 'orca_participant_m_arm_1') %>%
select(record_id,cg_firstname, child_firstname, language, email, phone)
demo <- demo %>%
left_join(eligible, by='record_id') %>%
left_join(contact_info, by='record_id') %>%
left_join(withdrawal_8m, by='record_id')
#ages & timezone
demo$current_age <- as.numeric(difftime(Sys.Date(), demo$child_dob, units="days"))
demo$timezone <- calculate_timezone(demo$zip_code)
#add 380 filter
demo <- demo %>%
filter(current_age >= 350 & longitudinal_yesno == 1)
invites$record_id <- as.character(invites$record_id)
invites$invite_date <- as.POSIXct(invites$invite_date, format="%m-%d-%Y %H:%M")
invites <- invites %>%
full_join(demo, by='record_id')
invites <- invites %>%
filter(is.na(optout_yesno) | optout_yesno == 0) %>%
select(record_id, invite_date, language, cg_firstname, child_firstname, email, phone, child_dob, zip_code, timezone) %>%
mutate(missed = ifelse(!is.na(invite_date), 0, 1))
invites <- invites %>%
mutate(language = case_when(language == 'en' ~ 'English', language == 'es' ~ 'Spanish'))
for (row in 1:nrow(invites)) {
if (is.na(invites$invite_date[row])) {
print(paste0("Invite has not been sent for record ", invites$record_id[row]))
invites$missed[row] <- 1
}
}
invites <- invites %>%
filter(invite_date >= threshold | missed == 1)
invites$invite_date <- format(invites$invite_date, "%Y-%m-%d %H:%M:%S")
write_csv(invites, 'invites.csv', na="")
library(OrcaData2)
library(tidyverse)
token
token <- "25120FD84FFDA3B220617BDF23B680CD"
get_orca_cohort(token)
orca <- get_orca_cohort(token)
View(orca)
records <- get_orca_field(token, field='record_id')
records <- records %>%
filter(redcap_event_name == 'orca_4month_arm_1') %>%
select(record_id)
#eligibility fields
to_keep <- get_orca_field(token, field='optout_yesno') %>%
select(-redcap_event_name)
long <- get_orca_field(token, field='longitudinal_yesno') %>%
select(-redcap_event_name)
records <- records %>%
left_join(to_keep, by="record_id") %>%
left_join(long, by='record_id')
records <- records %>%
filter(optout_yesno == 0 | is.na(optout_yesno)) %>%
filter(longitudinal_yesno != 0 & !is.na(longitudinal_yesno))
records <- records %>%
select(record_id)
date_12m <- get_orca_field(token, field='visit_date_12m')
visit_dates <- date_4m %>%
left_join(date_8m, by='record_id') %>%
left_join(date_12m)
#visit date info
date_4m <- get_orca_field(token, field='visit_date_4m')
date_8m <- get_orca_field(token, field='visit_date_8m')
date_12m <- get_orca_field(token, field='visit_date_12m')
#date_12m <- get_orca_field(token, field='visit_date_12m')
visit_dates <- date_4m %>%
left_join(date_8m, by='record_id') %>%
left_join(date_12m)
cols <- colnames(visit_dates)[!str_detect(colnames(visit_dates), 'redcap_event_name')]
visit_dates <- visit_dates[, cols]
records <- records %>%
left_join(visit_dates, by='record_id')
View(records)
get_orca_cohort <- function(token, screener=F) {
library(dplyr)
if (!screener) {
records <- get_orca_field(token, field='record_id')
records <- records %>%
filter(redcap_event_name == 'orca_4month_arm_1') %>%
select(record_id)
#eligibility fields
to_keep <- get_orca_field(token, field='optout_yesno') %>%
select(-redcap_event_name)
long <- get_orca_field(token, field='longitudinal_yesno') %>%
select(-redcap_event_name)
records <- records %>%
left_join(to_keep, by="record_id") %>%
left_join(long, by='record_id')
records <- records %>%
filter(optout_yesno == 0 | is.na(optout_yesno)) %>%
filter(longitudinal_yesno != 0 & !is.na(longitudinal_yesno))
records <- records %>%
select(record_id)
#visit date info
date_4m <- get_orca_field(token, field='visit_date_4m')
date_8m <- get_orca_field(token, field='visit_date_8m')
date_12m <- get_orca_field(token, field='visit_date_12m')
#date_12m <- get_orca_field(token, field='visit_date_12m')
visit_dates <- date_4m %>%
left_join(date_8m, by='record_id') %>%
left_join(date_12m)
cols <- colnames(visit_dates)[!str_detect(colnames(visit_dates), 'redcap_event_name')]
visit_dates <- visit_dates[, cols]
records <- records %>%
left_join(visit_dates, by='record_id')
return(records)
} else if (screener) {
records <- get_orca_field(token, field='record_id')
records <- records %>%
filter(redcap_event_name == 'orca_screener_arm_1') %>%
select(-redcap_event_name)
#pulling enrollment info
eligibility <- get_orca_data(token, form='contact_log', form_complete = F) %>%
filter(redcap_event_name=='orca_screener_arm_1')
eligibility <- eligibility %>%
filter(orca_study_enrollment___2 == 0) %>%
select(record_id, orca_contact_yesno, orca_study_enrollment___1,orca_study_enrollment___3:orca_study_enrollment___6) %>%
rename(orca = orca_study_enrollment___1, mice = orca_study_enrollment___3,
mice_baseline = orca_study_enrollment___4, peach = orca_study_enrollment___5,
reef = orca_study_enrollment___6
)
records <- records %>%
left_join(eligibility, by='record_id') %>%
filter(orca_contact_yesno == 1)
records <- records %>%
select(-orca_contact_yesno)
return(records)
}
}
orca <- get_orca_cohort(token)
remove.packages('OrcaData2')
devtools::install_github('amyhume/OrcaData2')
library(OrcaData2)
library(tidyverse)
token <- "25120FD84FFDA3B220617BDF23B680CD"
orca <- get_orca_cohort(token)
library(OrcaData2)
library(tidyverse)
token <- "25120FD84FFDA3B220617BDF23B680CD"
orca <- get_orca_cohort(token)
dobs <- get_orca_field(token, field='child_dob')
View(dobs)
orca <- orca %>%
left_join(dobs, by='record_id')
orca$age <- as.numeric(difftime(orca$child_dob, Sys.Date(), units='days'))
orca$age <- as.numeric(difftime(Sys.Date(), orca$child_dob, units='days'))
orca <- orca %>%
mutate(missed_8m = ifelse(age >= 260 & is.na(visit_date_8m), 1, NA),
missed_12m = ifelse(age >= 380 & is.na(visit_date_12m), 1, NA))
nrow(subset(orca, missed_8m == 1))
nrow(subset(orca, missed_12m == 1))
invite_8m <- get_expected_invites(token, timepoint='8m')
invite_12m <- get_expected_invites(token, timepoint='12m')
View(invite_8m)
counts_8m <- invite_8m$counts
counts_12m <- invite_12m$counts
View(counts_12m)
View(counts_8m)
library(OrcaData2)
library(tidyverse)
token
token <- "25120FD84FFDA3B220617BDF23B680CD"
p_info <- get_orca_data(token, form='participant_information', form_complete = F)
View(p_info)
p_info <- p_info %>%
filter(redcap_event_name == 'orca_participant_m_arm_1')
p_info <- p_info %>%
select(record_id, screener_record_id, prenatal_yesno, email)
scr <- '950056F36783568FBA0900EFAE8AA4A4'
prenatal_complete <- get_orca_field(scr, field='prams_complete')
View(prenatal_complete)
prenatal_complete <- prenatal_complete %>%
rename(screener_record_id = record_id) %>%
select(-redcap_event_name)
p_info <- p_info %>%
left_join(prenatal_complete, by='record_id')
p_info <- p_info %>%
left_join(prenatal_complete, by='screener_record_id')
prenatal_complete$screener_record_id <- as.character(prenatal_complete$screener_record_id)
p_info <- p_info %>%
left_join(prenatal_complete, by='screener_record_id')
View(p_info)
nrow(subset(p_info, !is.na(prams_complete)))
nrow(subset(p_info, prams_complete == 2))
prenatal <- p_info %>%
filter(prams_complete == 2)
View(prenatal)
p_info <- p_info %>%
mutate(discrepant = ifelse(prams_complete == 2 & prenatal_yesno == 0, 1, NA))
p_info <- p_info %>%
mutate(discrepant = ifelse(prams_complete == 2 & (prenatal_yesno == 0 | is.na(prenatal_yesno)), 1, NA))
View(orca)
visits <- orca %>%
select(record_id, visit_date_8m, visit_date_12m)
prenatal <- prenatal %>%
left_join(visits, by='record_id')
setwd("~/Documents/GitHub/OrcaData2")
roxygen2::roxygenise()
